{
    "docs": [
        {
            "location": "/", 
            "text": "SoftFIRE\n\n\nSoftFIRE is building a federated experimental platform aimed at the construction and experimentation of services and functionalities built on top of NFV and SDN technologies. The platform is a loose federation of already existing testbed owned and operated by distinct organizations for purposes of research and development.\n\n\nSoftFIRE has three main objectives: supporting interoperability, programming and security of the federated testbed. Supporting the programmability of the platform is then a major goal and it is the focus of the SoftFIRE\u2019s Second Open Call.\n\n\nThe SoftFIRE testbeds\n\n\nSoftFIRE federates different European testbeds owned by the partners of the project. Currently the federated Testbed are\n\n\n\n\nRMED\n Cloud Lab from Ericsson, located in Rome;\n\n\nFUSECO Playground\n from FOKUS Fraunhofer/TUB, located in Berlin;\n\n\n5GIC\n from University of Surrey, located in Guildford, Surrey;\n\n\n\n\nNew testbeds are now in the integration phase and may soon join the Federation, e.g.,\n\n\n\n\nDeutsche Telekom\n;\n\n\nAssembly Data System\n (ADS).\n\n\n\n\nIn the past other Testbed were integrate (and currently not available):\n\n\n\n\nJoLNet\n from TIM, spread over several Italian cities;\n\n\n\n\nThe SoftFIRE architecture\n\n\nExperimenters can access the available resources through a single access-point, i.e., the SoftFIRE Experiment Manager, Figure 1. This tool will be under development during the entire lifecycle of the project in order to progressively manage and orchestrate the allocation of several resources (Virtualization, SDN, 5G Resources, Security, and Monitoring). The Experiment Manager provides primitives to authenticate users and to discover, reserve, acquire, monitor and finally release a set of arbitrary resources of the infrastructure. Once a user has been given the authorization to access the system, he can perform experiments on top of the architecture for a certain amount of time. The SoftFIRE Experiment Manager (SEM) will ensure interoperability with other technologies by implementing the standard TOSCA interface.\n\n\n\n\nGet in contact\n\n\n\n\nOur website: \nhttp://softfire.eu\n\n\nSending us an email to \nour mailing list\n\n\nSlack channel: \nSoftFIRE\n. If you are not registered to this channel, obtain an invitation \nhere\n\n\n\n\n\n\n\n\n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Introduction"
        }, 
        {
            "location": "/#softfire", 
            "text": "SoftFIRE is building a federated experimental platform aimed at the construction and experimentation of services and functionalities built on top of NFV and SDN technologies. The platform is a loose federation of already existing testbed owned and operated by distinct organizations for purposes of research and development.  SoftFIRE has three main objectives: supporting interoperability, programming and security of the federated testbed. Supporting the programmability of the platform is then a major goal and it is the focus of the SoftFIRE\u2019s Second Open Call.", 
            "title": "SoftFIRE"
        }, 
        {
            "location": "/#the-softfire-testbeds", 
            "text": "SoftFIRE federates different European testbeds owned by the partners of the project. Currently the federated Testbed are   RMED  Cloud Lab from Ericsson, located in Rome;  FUSECO Playground  from FOKUS Fraunhofer/TUB, located in Berlin;  5GIC  from University of Surrey, located in Guildford, Surrey;   New testbeds are now in the integration phase and may soon join the Federation, e.g.,   Deutsche Telekom ;  Assembly Data System  (ADS).   In the past other Testbed were integrate (and currently not available):   JoLNet  from TIM, spread over several Italian cities;", 
            "title": "The SoftFIRE testbeds"
        }, 
        {
            "location": "/#the-softfire-architecture", 
            "text": "Experimenters can access the available resources through a single access-point, i.e., the SoftFIRE Experiment Manager, Figure 1. This tool will be under development during the entire lifecycle of the project in order to progressively manage and orchestrate the allocation of several resources (Virtualization, SDN, 5G Resources, Security, and Monitoring). The Experiment Manager provides primitives to authenticate users and to discover, reserve, acquire, monitor and finally release a set of arbitrary resources of the infrastructure. Once a user has been given the authorization to access the system, he can perform experiments on top of the architecture for a certain amount of time. The SoftFIRE Experiment Manager (SEM) will ensure interoperability with other technologies by implementing the standard TOSCA interface.", 
            "title": "The SoftFIRE architecture"
        }, 
        {
            "location": "/#get-in-contact", 
            "text": "Our website:  http://softfire.eu  Sending us an email to  our mailing list  Slack channel:  SoftFIRE . If you are not registered to this channel, obtain an invitation  here    \n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Get in contact"
        }, 
        {
            "location": "/softfire-middleware/", 
            "text": "SoftFIRE architecture\n\n\nThe SoftFIRE Middleware is the central software logic of the SoftFIRE platform. It exposes a ReST api that are consumed by a CLI or a Dashboard. The Experimenter can use one of these two tools for interacting with the SoftFIRE platform. The southbound interface is directed to the testbeds. Deutsche Telekom, Fraunhofer FOKUS, Ericsson, University of Surrey and Assembly Data System.\n\n\n\n\nThe SoftFIRE Middleware\n\n\nThe central core logic of the SoftFIRE platform is the SoftFIRE Middleware. The SoftFIRE Middleware is composed by multiple managers, each of them is in charge of a specific kind of resource.\n\n\n\n\nSDN Manager\n manages SDN resources\n\n\nSecurity Manager\n for the Security resources\n\n\nNFV Manager\n is in charge of providing NFV functionalities to the middleware\n\n\nMonitoring manager\n provides experimenter monitoring resource access\n\n\nPhysical Device Manager\n handles the access to the physical resources\n\n\n\n\nThe main component of the infrastructure is the \nExperimenter Manager\n (EM). Other managers register to the EM, so the EM is able to redirect the request coming from the Experimenter to the correct specific manager depending on the kind of resource requested. Its main features include:\n\n\n\n\nResource discovery\n\n\nUnderstand the experiment definition\n\n\nResource reservation\n\n\nResource provisioning\n\n\nProvide Experiment Monitoring\n\n\nUser Authentication\n\n\nUser Authorization\n\n\n\n\nThe protocol in between the managers is \ngRPC\n. For that reason each manager can be implemented in any language that supports gRPC.\n\n\nInteractions\n\n\nThe following image is only for personal knowledge, it is not relevant for the execution of the experiment. The figure defines the high level interactions between the experimenter, the Experiment Manager and the other Managers, through a sequence diagrams.\n\n\n\n\n\n\n\n\n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Softfire Middleware"
        }, 
        {
            "location": "/softfire-middleware/#softfire-architecture", 
            "text": "The SoftFIRE Middleware is the central software logic of the SoftFIRE platform. It exposes a ReST api that are consumed by a CLI or a Dashboard. The Experimenter can use one of these two tools for interacting with the SoftFIRE platform. The southbound interface is directed to the testbeds. Deutsche Telekom, Fraunhofer FOKUS, Ericsson, University of Surrey and Assembly Data System.", 
            "title": "SoftFIRE architecture"
        }, 
        {
            "location": "/softfire-middleware/#the-softfire-middleware", 
            "text": "The central core logic of the SoftFIRE platform is the SoftFIRE Middleware. The SoftFIRE Middleware is composed by multiple managers, each of them is in charge of a specific kind of resource.   SDN Manager  manages SDN resources  Security Manager  for the Security resources  NFV Manager  is in charge of providing NFV functionalities to the middleware  Monitoring manager  provides experimenter monitoring resource access  Physical Device Manager  handles the access to the physical resources   The main component of the infrastructure is the  Experimenter Manager  (EM). Other managers register to the EM, so the EM is able to redirect the request coming from the Experimenter to the correct specific manager depending on the kind of resource requested. Its main features include:   Resource discovery  Understand the experiment definition  Resource reservation  Resource provisioning  Provide Experiment Monitoring  User Authentication  User Authorization   The protocol in between the managers is  gRPC . For that reason each manager can be implemented in any language that supports gRPC.", 
            "title": "The SoftFIRE Middleware"
        }, 
        {
            "location": "/softfire-middleware/#interactions", 
            "text": "The following image is only for personal knowledge, it is not relevant for the execution of the experiment. The figure defines the high level interactions between the experimenter, the Experiment Manager and the other Managers, through a sequence diagrams.    \n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Interactions"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Registration to the Tools\n\n\n\n\nRegister at the Web Portal (and win the open call \n)\n\n\nRegister to redmine \nthis page\n and create an account\n\n\nInstall and configure \nopenvpn\n\n\nDesign your experiment\n\n\nExecute the experiment\n\n\nRetrieve the results\n\n\nTerminate the experiment\n\n\n\n\nWe invite the experimenters to use the SoftFIRE \nSlack channel\n the Issues to address specific problems or support requests. You can also visit the \nForums\n section to open a new discussion or to find useful information shared in the community\n\n\nOpenVPN setup\n\n\n\n\nInstall \nOpenVPN\n for your platform\n\n\nuse the configuration file downloaded from the SoftFIRE Web Portal\n\n\nstart OpenVPN client with administrative rights (or sudo on linux) using the configuration file\n\n\n\n\n\n\nNote\n\n\nif the configuration file download does not work, use \nthis guide\n for creating the configuration file manually\n\n\n\n\nThe Experiment Manager\n\n\nGood, now you are in \n You should be able to reach now the \nExperiment Manager Web page\n. Follow this tutorial on the \nnext page\n for getting more knowledge on how to proceed with your experiment.\n\n\nTestbeds Information and usage\n\n\n\n\nSoftFIRE infrastructure monitoring \nZABBIX\n\n\nInterconnection Benchmarks: \nVPNBenachmark\n\n\n\n\n\n\n\n\n\n\n\n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#registration-to-the-tools", 
            "text": "Register at the Web Portal (and win the open call  )  Register to redmine  this page  and create an account  Install and configure  openvpn  Design your experiment  Execute the experiment  Retrieve the results  Terminate the experiment   We invite the experimenters to use the SoftFIRE  Slack channel  the Issues to address specific problems or support requests. You can also visit the  Forums  section to open a new discussion or to find useful information shared in the community", 
            "title": "Registration to the Tools"
        }, 
        {
            "location": "/getting-started/#openvpn-setup", 
            "text": "Install  OpenVPN  for your platform  use the configuration file downloaded from the SoftFIRE Web Portal  start OpenVPN client with administrative rights (or sudo on linux) using the configuration file    Note  if the configuration file download does not work, use  this guide  for creating the configuration file manually", 
            "title": "OpenVPN setup"
        }, 
        {
            "location": "/getting-started/#the-experiment-manager", 
            "text": "Good, now you are in   You should be able to reach now the  Experiment Manager Web page . Follow this tutorial on the  next page  for getting more knowledge on how to proceed with your experiment.", 
            "title": "The Experiment Manager"
        }, 
        {
            "location": "/getting-started/#testbeds-information-and-usage", 
            "text": "SoftFIRE infrastructure monitoring  ZABBIX  Interconnection Benchmarks:  VPNBenachmark     \n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Testbeds Information and usage"
        }, 
        {
            "location": "/experiment-manager/", 
            "text": "Experiment Manager\n\n\nAfter having won the Open Call you are officially an Experimenter. First of all, you should have received a certificate that will be used for authentication of the \nSoftFIRE VPN\n. Once the SoftFIRE VPN is active you are able to reach this page, the \nExperimenter Manager\n. This is the page you will see:\n\n\n\n\nLogin\n\n\nEnter your username and password, the password is the same used in the SoftFIRE Web Portal and the username is your \nname+surname\n. The \nSignup\n is currently disabled\n\n\n\n\nNote\n\n\nThe username must be the same that the one you used while registering.\n\n\n\n\nIf the login works correctly you will be redirected on the Experimenter page that looks like the following picture.\n\n\n\n\nResource discovery\n\n\nBy reloading the page, you are also refreshing the list of available resources. These resources have a detailed description and an id. The id will be used in the \ndefinition of the experiment\n, for pointing to the resources you want to reserve. For more details on how to define the experiment, please check the \nnext page\n.\n\n\nResource reservation\n\n\nFor reserving resources, you must define an experiment using the \nTOSCA archive\n. Then you have to upload this archive file in the input box of \nReserve resources\n section. Once the experiment is reserved you will be able to see it under the \nDefined experiment\n section\n\n\nResource provisioning\n\n\nOnce you have uploaded your experiment CSAR file, you will have a list of chosen resources in the bottom table. The \nvalue\n of the resources will be empty until deployed. By clicking to the \"Deploy\" button, you will trigger the deployment in the SoftFIRE middleware. The status will change to deployed and you will actually see the content of the deployed resource in the value column.\n\n\nResource Termination\n\n\nBy clicking to the \"Delete\" button, you will trigger the removal of all the resources created. You will have to reserve the experiment again in case you want to redeploy\n\n\n\n\n\n\n\n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Experiment Manager"
        }, 
        {
            "location": "/experiment-manager/#experiment-manager", 
            "text": "After having won the Open Call you are officially an Experimenter. First of all, you should have received a certificate that will be used for authentication of the  SoftFIRE VPN . Once the SoftFIRE VPN is active you are able to reach this page, the  Experimenter Manager . This is the page you will see:", 
            "title": "Experiment Manager"
        }, 
        {
            "location": "/experiment-manager/#login", 
            "text": "Enter your username and password, the password is the same used in the SoftFIRE Web Portal and the username is your  name+surname . The  Signup  is currently disabled   Note  The username must be the same that the one you used while registering.   If the login works correctly you will be redirected on the Experimenter page that looks like the following picture.", 
            "title": "Login"
        }, 
        {
            "location": "/experiment-manager/#resource-discovery", 
            "text": "By reloading the page, you are also refreshing the list of available resources. These resources have a detailed description and an id. The id will be used in the  definition of the experiment , for pointing to the resources you want to reserve. For more details on how to define the experiment, please check the  next page .", 
            "title": "Resource discovery"
        }, 
        {
            "location": "/experiment-manager/#resource-reservation", 
            "text": "For reserving resources, you must define an experiment using the  TOSCA archive . Then you have to upload this archive file in the input box of  Reserve resources  section. Once the experiment is reserved you will be able to see it under the  Defined experiment  section", 
            "title": "Resource reservation"
        }, 
        {
            "location": "/experiment-manager/#resource-provisioning", 
            "text": "Once you have uploaded your experiment CSAR file, you will have a list of chosen resources in the bottom table. The  value  of the resources will be empty until deployed. By clicking to the \"Deploy\" button, you will trigger the deployment in the SoftFIRE middleware. The status will change to deployed and you will actually see the content of the deployed resource in the value column.", 
            "title": "Resource provisioning"
        }, 
        {
            "location": "/experiment-manager/#resource-termination", 
            "text": "By clicking to the \"Delete\" button, you will trigger the removal of all the resources created. You will have to reserve the experiment again in case you want to redeploy   \n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Resource Termination"
        }, 
        {
            "location": "/experiment-definition/", 
            "text": "Experiment definition\n\n\nThe experiment is defined using \nTopology and Orchestration Specification for Cloud Applications\n (TOSCA). In particular, the Experimenter has to create a \nCSAR\n zip file containing all the necessary files and definitions for letting the \nExperimentManager\n (EM) instantiate everything. The structure of the CSAR is defined as following:\n\n\n\u251c\u2500\u2500 Definitions\n\n|\n   \u2514\u2500\u2500 experiment.yaml\n\u251c\u2500\u2500 Files\n\n|\n   \u2514\u2500\u2500 nsd.csar\n\u2514\u2500\u2500 TOSCA-Metadata\n    \u251c\u2500\u2500 Metadata.yaml\n    \u2514\u2500\u2500 TOSCA.meta\n\n\nThere are three two mandatory folders plus one optional. \nDefinitions\n and \nTOSCA-Metadata\n are mandatory folder containing the metadata files and the experiment definition, as described in the following sections. the \nFiles\n folder contains some additional files needed in case some resources specifies extra requirements.\n\n\nTOSCA-Metadata\n\n\nThe TOSCA-Metadata folder contains the TOSCA.meta file and the Metadata.yaml file. The TOSCA.meta file must contain the reference to the template in this case \nEntry-Definitions\n:\n \nDefinitions/experiment.yaml\n. For example:\n\n\nTOSCA-Meta-File-Version\n:\n \n1.0\n\n\nCSAR-Version\n:\n \n1.1\n\n\nCreated-By\n:\n \nMyCompany\n\n\nEntry-Definitions\n:\n \nDefinitions/experiment.yaml\n\n\n\n\n\nThe Metadata.yaml contains experiment meta information:\n\n\n\n\nthe name\n\n\nthe start date\n\n\nthe end date\n\n\n\n\n\n\nNote\n\n\nPlease use ISO format dates (YYYY-MM-DD HH:MM).\n\n\n\n\n\n\nNote\n\n\nThese dates are general for the whole experiment, but you can specify specific dates per resource. The specific dates of the resources override these ones.\n\n\n\n\nAs follows:\n\nname\n:\n \nExperiment Name\n\n\nstart-date\n:\n \n2017-07-28\n \n10:00\n\n\nend-date\n:\n \n2017-07-30\n \n10:00\n\n\n\n\nWhere:\n\n\n\n\nname\n: simple name of your experiment\n\n\nstart-date\n: start date of your experiment.\n\n\nend-date\n: end date of your experiment.\n\n\n\n\nDefinitions\n\n\nThe experiment.yaml must follow a specific structure. An example is show in the following lines:\n\n\ntosca_definitions_version\n:\n \ntosca_simple_yaml_1_0\n\n\n\ndescription\n:\n \nTemplate for SoftFIRE yaml resource request definition\n\n\n\nimports\n:\n\n  \n-\n \nsoftfire_node_types\n:\n \nhttp://docs.softfire.eu/etc/softfire_node_types.yaml\n\n\n\ntopology_template\n:\n\n  \nnode_templates\n:\n\n    \nzabbix_server\n:\n\n      \ntype\n:\n \nMonitoringNode\n\n      \nproperties\n:\n\n        \nresource_id\n:\n \nmonitoring\n\n        \ntestbed\n:\n \nericsson\n\n\n    \nsdn_ericsson\n:\n\n      \ntype\n:\n \nSdnResource\n\n      \nproperties\n:\n\n        \nresource_id\n:\n \nsdn_ericsson\n\n        \ntestbed\n:\n \nericsson\n\n\n    \niperf\n:\n\n      \ntype\n:\n \nNfvResource\n\n      \nproperties\n:\n\n        \nresource_id\n:\n \niperf\n\n        \nnsd_name\n:\n \nThe Iperf NSD\n\n        \ntestbeds\n:\n \n{\n \nANY\n:\n \nericsson\n \n}\n\n\n\n\n\nAs shown in the example, the SoftFIRE experiment yaml file must contain the TOSCA definition version as \ntosca_definitions_version\n:\n \ntosca_simple_yaml_1_0\n. This line is followed by a description of the experiment.\n\n\nThe imports section must be specified as in the example because the EM will only accept specific node types defined in \nthis document\n\n\nEach node type specifies a \nresource_id\n that must be chosen from the available resources. The node name is arbitrary. Each node type can have some additional properties and they can be different from each others. Check the \nnode type specification\n to understand all the node types. However, each node type is specified in the specific manager page:\n\n\n\n\nSDNResource\n: \nSDN Manager\n\n\nNFVResource\n: \nNFV Manager\n\n\nPhysicalResource\n: \nPhysical Device Manager\n\n\nMonitoringResource\n: \nMonitoring Manager\n\n\nSecurityResource\n: \nSecurity Manager\n\n\n\n\nTopology Template\n\n\nThe topology template describe the actual experiment. The required nodes are listed in this section. The types are defined in the \nnode types\n definitions, please refer to the specific manager page for the description of the type.\n\n\nFiles\n\n\nThis folder contains an inner CSAR of a NS. This is only used in case the NFV Resource you want to deploy is not one of the preconfigured one. In this case, the how to build this CSAR is explained in the \nOpen Baton CSAR tutorial\n. And the NfvResource \nfile_name\n field must point to this file. An example of two Ubuntu 16.04 VNFs can be found \nhere\n\n\nExample\n\n\nA full example using iperf can be found \nhere\n. A full example uploading two simple Ubuntu VNFs can be found \nhere\n\n\n\n\n\n\n\n\n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Define your experiment"
        }, 
        {
            "location": "/experiment-definition/#experiment-definition", 
            "text": "The experiment is defined using  Topology and Orchestration Specification for Cloud Applications  (TOSCA). In particular, the Experimenter has to create a  CSAR  zip file containing all the necessary files and definitions for letting the  ExperimentManager  (EM) instantiate everything. The structure of the CSAR is defined as following:  \u251c\u2500\u2500 Definitions |    \u2514\u2500\u2500 experiment.yaml\n\u251c\u2500\u2500 Files |    \u2514\u2500\u2500 nsd.csar\n\u2514\u2500\u2500 TOSCA-Metadata\n    \u251c\u2500\u2500 Metadata.yaml\n    \u2514\u2500\u2500 TOSCA.meta \nThere are three two mandatory folders plus one optional.  Definitions  and  TOSCA-Metadata  are mandatory folder containing the metadata files and the experiment definition, as described in the following sections. the  Files  folder contains some additional files needed in case some resources specifies extra requirements.", 
            "title": "Experiment definition"
        }, 
        {
            "location": "/experiment-definition/#tosca-metadata", 
            "text": "The TOSCA-Metadata folder contains the TOSCA.meta file and the Metadata.yaml file. The TOSCA.meta file must contain the reference to the template in this case  Entry-Definitions :   Definitions/experiment.yaml . For example:  TOSCA-Meta-File-Version :   1.0  CSAR-Version :   1.1  Created-By :   MyCompany  Entry-Definitions :   Definitions/experiment.yaml   The Metadata.yaml contains experiment meta information:   the name  the start date  the end date    Note  Please use ISO format dates (YYYY-MM-DD HH:MM).    Note  These dates are general for the whole experiment, but you can specify specific dates per resource. The specific dates of the resources override these ones.   As follows: name :   Experiment Name  start-date :   2017-07-28   10:00  end-date :   2017-07-30   10:00   Where:   name : simple name of your experiment  start-date : start date of your experiment.  end-date : end date of your experiment.", 
            "title": "TOSCA-Metadata"
        }, 
        {
            "location": "/experiment-definition/#definitions", 
            "text": "The experiment.yaml must follow a specific structure. An example is show in the following lines:  tosca_definitions_version :   tosca_simple_yaml_1_0  description :   Template for SoftFIRE yaml resource request definition  imports : \n   -   softfire_node_types :   http://docs.softfire.eu/etc/softfire_node_types.yaml  topology_template : \n   node_templates : \n     zabbix_server : \n       type :   MonitoringNode \n       properties : \n         resource_id :   monitoring \n         testbed :   ericsson \n\n     sdn_ericsson : \n       type :   SdnResource \n       properties : \n         resource_id :   sdn_ericsson \n         testbed :   ericsson \n\n     iperf : \n       type :   NfvResource \n       properties : \n         resource_id :   iperf \n         nsd_name :   The Iperf NSD \n         testbeds :   {   ANY :   ericsson   }   As shown in the example, the SoftFIRE experiment yaml file must contain the TOSCA definition version as  tosca_definitions_version :   tosca_simple_yaml_1_0 . This line is followed by a description of the experiment.  The imports section must be specified as in the example because the EM will only accept specific node types defined in  this document  Each node type specifies a  resource_id  that must be chosen from the available resources. The node name is arbitrary. Each node type can have some additional properties and they can be different from each others. Check the  node type specification  to understand all the node types. However, each node type is specified in the specific manager page:   SDNResource :  SDN Manager  NFVResource :  NFV Manager  PhysicalResource :  Physical Device Manager  MonitoringResource :  Monitoring Manager  SecurityResource :  Security Manager", 
            "title": "Definitions"
        }, 
        {
            "location": "/experiment-definition/#topology-template", 
            "text": "The topology template describe the actual experiment. The required nodes are listed in this section. The types are defined in the  node types  definitions, please refer to the specific manager page for the description of the type.", 
            "title": "Topology Template"
        }, 
        {
            "location": "/experiment-definition/#files", 
            "text": "This folder contains an inner CSAR of a NS. This is only used in case the NFV Resource you want to deploy is not one of the preconfigured one. In this case, the how to build this CSAR is explained in the  Open Baton CSAR tutorial . And the NfvResource  file_name  field must point to this file. An example of two Ubuntu 16.04 VNFs can be found  here", 
            "title": "Files"
        }, 
        {
            "location": "/experiment-definition/#example", 
            "text": "A full example using iperf can be found  here . A full example uploading two simple Ubuntu VNFs can be found  here    \n      // Creating custom :external selector\n      $.expr[':'].external = function(obj){\n          return !obj.href.match(/^mailto\\:/)\n                  && (obj.hostname != location.hostname);\n      };\n      $(function(){\n        $('a:external').addClass('external');\n        $(\".external\").attr('target','_blank');\n      })", 
            "title": "Example"
        }, 
        {
            "location": "/nfv-manager/", 
            "text": "NFV Manager\n\n\nThe NFV Manager is the manager interfacing with Open Baton. In case the Experimenter wants to deploy a different NS from the preconfigured ones, it is required to follow \nthis tutorial\n\n\nNFV Resource\n\n\nThe NfvResource node type is defined as follows, as per \nnode types page\n:\n\n\nNfvResource\n:\n\n    \nderived_from\n:\n \neu.softfire.BaseResource\n\n    \ndescription\n:\n \nDefines\n \na\n \nNFV\n \nresource\n \nrequest\n \nin\n \nthe\n \nSoftFIRE\n \nMiddleware\n\n    \nproperties\n:\n\n      \ntestbeds\n:\n\n        \ntype\n:\n \nmap\n\n        \nentry_schema\n:\n\n          \ndescription\n:\n \nmapping\n \nbetween\n \nvnf\n \ntypes\n \nand\n \ntestbed.\n \nOr\n\n                       \nANY\n:\ntestbed_name\n \nfor\n \nall\n \nin\n \none\n\n          \ntype\n:\n \nstring\n\n      \nnsd_name\n:\n\n        \ntype\n:\n \nstring\n\n      \nfile_name\n:\n\n        \ntype\n:\n \nstring\n\n        \nrequired\n:\n \nfalse\n\n\n\n\n\nThis node type has different properties:\n\n\n\n\nresource_id\n: The resource id that can be found from the list resource table.\n\n\ntestbeds\n: a map where you can define the testbed where each VNF will be deployed. It is defined as vnf \nname\n and \ntestbed name\n\n\nnsd_name\n: the name of the NS\n\n\nfile_name\n: in case the preconfigured NS are not sufficient for your experiment you can upload your own NS in CSAR format and place it in the Files folder. This field contains the name of the file\n\n\n\n\nTestbed Names\n\n\n\n\n\n\n\n\nAlias\n\n\nTestbed\n\n\n\n\n\n\n\n\n\n\nfokus\n\n\nFOKUS testbed, Berlin\n\n\n\n\n\n\nericsson\n\n\nERICSSON testbed, Rome\n\n\n\n\n\n\nsurrey\n\n\nSURREY testbed, Surrey\n\n\n\n\n\n\nads\n\n\nADS testbed, Rome\n\n\n\n\n\n\ndt\n\n\nDeutsche Telekom testbed, Berlin\n\n\n\n\n\n\nany\n\n\nNo difference\n\n\n\n\n\n\n\n\nTechnical details\n\n\nIn the following image you can understand the life cycle of the Nfv Manager based on the sequence diagram", 
            "title": "NFV Manager"
        }, 
        {
            "location": "/nfv-manager/#nfv-manager", 
            "text": "The NFV Manager is the manager interfacing with Open Baton. In case the Experimenter wants to deploy a different NS from the preconfigured ones, it is required to follow  this tutorial", 
            "title": "NFV Manager"
        }, 
        {
            "location": "/nfv-manager/#nfv-resource", 
            "text": "The NfvResource node type is defined as follows, as per  node types page :  NfvResource : \n     derived_from :   eu.softfire.BaseResource \n     description :   Defines   a   NFV   resource   request   in   the   SoftFIRE   Middleware \n     properties : \n       testbeds : \n         type :   map \n         entry_schema : \n           description :   mapping   between   vnf   types   and   testbed.   Or \n                        ANY : testbed_name   for   all   in   one \n           type :   string \n       nsd_name : \n         type :   string \n       file_name : \n         type :   string \n         required :   false   This node type has different properties:   resource_id : The resource id that can be found from the list resource table.  testbeds : a map where you can define the testbed where each VNF will be deployed. It is defined as vnf  name  and  testbed name  nsd_name : the name of the NS  file_name : in case the preconfigured NS are not sufficient for your experiment you can upload your own NS in CSAR format and place it in the Files folder. This field contains the name of the file", 
            "title": "NFV Resource"
        }, 
        {
            "location": "/nfv-manager/#testbed-names", 
            "text": "Alias  Testbed      fokus  FOKUS testbed, Berlin    ericsson  ERICSSON testbed, Rome    surrey  SURREY testbed, Surrey    ads  ADS testbed, Rome    dt  Deutsche Telekom testbed, Berlin    any  No difference", 
            "title": "Testbed Names"
        }, 
        {
            "location": "/nfv-manager/#technical-details", 
            "text": "In the following image you can understand the life cycle of the Nfv Manager based on the sequence diagram", 
            "title": "Technical details"
        }, 
        {
            "location": "/sdn-manager/", 
            "text": "SDN Manager\n\n\nThe SDN manager is in charge of managing access to the SDN resources provided by some testbeds.\n\n\nThe SDN manager keeps track of the API endpoints towards the SDN proxy services.\n\n\nThe SDN manager uses the following Experiment LifeCycles:\n\n\n\n\nList\n\n\nProvision\n\n\nRelease\n\n\n\n\nUpon list resources the SDN manager returns a list of available SDN endpoints to the Experimenter.\n\n\nTo actually use an SDN resopurce in an experiment a SDNResource has to be included into the experiment descripton that matches an resource id returned by list resources.\n\n\n\n\nSDN Resource type\n\n\nThe SdnResource node type is defined as follows, as per \nnode types page\n:\n\n\neu.softfire.BaseResource\n:\n\n  \nderived_from\n:\n \ntosca.nodes.Root\n\n  \nproperties\n:\n\n    \nresource_id\n:\n\n      \ntype\n:\n \nstring\n\n      \nrequired\n:\n \ntrue\n\n\n\nSdnResource\n:\n\n  \nderived_from\n:\n \neu.softfire.BaseResource\n\n  \ndescription\n:\n \nDefines a SDN resource request in the SoftFIRE Middleware\n\n\n\n\n\nThis Resource has the following properties:\n\n\n\n\nresource_id\n: Defines the type of the SDN Resource. Depending on this id the testbed that is used to provide the SDN resource implicit is chosen.\n\n\n\n\nAssigned Resource data\n\n\nAfter successful instantiation of the resource the experimenter receives an JSON object with the following information to actually use the provided SDN resource.\n\n\nList of resource objects\n\n\n\n\nresource-id\n: the ID of the allocated resource\n\n\nURI\n: An URL that is used to interact with the actual SDN resource according to the API specification of this particular Type.\n\n\nflow-table-range\n: List of flow table id's that can be used by the Experimenter to place its own flow-rules.\n\n\ntoken\n: A security token that needs to be send with every request to the API endpoint specified by the URI property. This token is used to identify the Experiment ad to allow access the the networking resources associated with this experiment.\n\n\n\n\nCurrently supported SDN endpoints\n\n\nEach testbed can provide a different imlementation of SDN resources. The current version of the SoftFIRE sdn middleware provides access to two types of SDN controllers:\n\n\n\n\nThe Frauhofer FOKUS testbed uses its own Implementation of an SDN controller named \nOpenSDNCore\n.\n  Specification of the provided API features can be found in its \nDocumentation pages\n\n\nThe Testbed of Ericsson and Assembly Data Systems (ADS) will provide access to \nOpenDayLight\n SDN controllers.", 
            "title": "General"
        }, 
        {
            "location": "/sdn-manager/#sdn-manager", 
            "text": "The SDN manager is in charge of managing access to the SDN resources provided by some testbeds.  The SDN manager keeps track of the API endpoints towards the SDN proxy services.  The SDN manager uses the following Experiment LifeCycles:   List  Provision  Release   Upon list resources the SDN manager returns a list of available SDN endpoints to the Experimenter.  To actually use an SDN resopurce in an experiment a SDNResource has to be included into the experiment descripton that matches an resource id returned by list resources.", 
            "title": "SDN Manager"
        }, 
        {
            "location": "/sdn-manager/#sdn-resource-type", 
            "text": "The SdnResource node type is defined as follows, as per  node types page :  eu.softfire.BaseResource : \n   derived_from :   tosca.nodes.Root \n   properties : \n     resource_id : \n       type :   string \n       required :   true  SdnResource : \n   derived_from :   eu.softfire.BaseResource \n   description :   Defines a SDN resource request in the SoftFIRE Middleware   This Resource has the following properties:   resource_id : Defines the type of the SDN Resource. Depending on this id the testbed that is used to provide the SDN resource implicit is chosen.", 
            "title": "SDN Resource type"
        }, 
        {
            "location": "/sdn-manager/#assigned-resource-data", 
            "text": "After successful instantiation of the resource the experimenter receives an JSON object with the following information to actually use the provided SDN resource.  List of resource objects   resource-id : the ID of the allocated resource  URI : An URL that is used to interact with the actual SDN resource according to the API specification of this particular Type.  flow-table-range : List of flow table id's that can be used by the Experimenter to place its own flow-rules.  token : A security token that needs to be send with every request to the API endpoint specified by the URI property. This token is used to identify the Experiment ad to allow access the the networking resources associated with this experiment.", 
            "title": "Assigned Resource data"
        }, 
        {
            "location": "/sdn-manager/#currently-supported-sdn-endpoints", 
            "text": "Each testbed can provide a different imlementation of SDN resources. The current version of the SoftFIRE sdn middleware provides access to two types of SDN controllers:   The Frauhofer FOKUS testbed uses its own Implementation of an SDN controller named  OpenSDNCore .\n  Specification of the provided API features can be found in its  Documentation pages  The Testbed of Ericsson and Assembly Data Systems (ADS) will provide access to  OpenDayLight  SDN controllers.", 
            "title": "Currently supported SDN endpoints"
        }, 
        {
            "location": "/opensdncore/", 
            "text": "Fraunhofer FOKUS OpenSDNCore\n\n\nIntroduction\n\n\nAPI Documentation\n\n\nThe OpenSDNcore provides an JSON RPC based northbound API to control all aspects of the SDN implementation.\nThe details of the provided api function calls are described in the \nNorthbound API page\n\n\nArchitecture\n\n\n\n\nMore Details please refer to the \nOpenSDNCore Controller documentation", 
            "title": "Introduction"
        }, 
        {
            "location": "/opensdncore/#fraunhofer-fokus-opensdncore", 
            "text": "", 
            "title": "Fraunhofer FOKUS OpenSDNCore"
        }, 
        {
            "location": "/opensdncore/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/opensdncore/#api-documentation", 
            "text": "The OpenSDNcore provides an JSON RPC based northbound API to control all aspects of the SDN implementation.\nThe details of the provided api function calls are described in the  Northbound API page", 
            "title": "API Documentation"
        }, 
        {
            "location": "/opensdncore/#architecture", 
            "text": "More Details please refer to the  OpenSDNCore Controller documentation", 
            "title": "Architecture"
        }, 
        {
            "location": "/osdnc-controller/", 
            "text": "OpenSDNCore Controller\n\n\nIntroduction\n\n\nThe OpenFlow Controller is one of the key components in current OpenFlow architecture. Before go through this guiding page, users are recommended to read the latest \nOpenFlow Specification\n and obtain a basic knowledge of !OpenFlow Technology, and how the Controller cooperates with !OpenFlow Switches.\n\n\nThe OpenFlow Controller is implemented as a wharf module named OFC. It is an intermediate components between the switch and higher layer applications. The following graph depicts a general view of the Controller architecture.\n\n\n\n\nThe !OpenFlow controller is the intermediate layer between network applications and !OpenFlow switches.\nIn our presented concept, the controller is based on a three-tier architecture shown in Figure \\ref{fig:controller}.\nThe three key components of the controller are (1) the core function layer, (2) northbound interface and (3) southbound interface.\n\n\nThe southbound interface handles the communication with !OpenFlow switches using !OpenFlow Protocol. It consists of two components: the !OpenFlow channel and !OpenFlow message codec.The !OpenFlow channel connects each switch to the controller. The !OpenFlow message codec, as its name shows, is used for encoding/decoding each time a message needs to be sent or received.\n\n\nThe core function layer contains a minimized set of functions required when deploying a controller.\nThe controller-to-Switch Message Pusher constructs new messages and push them to the !OpenFlow channel.\nFor asynchronous and symmetric messages coming from switch, the corresponding message handler will be invoked,\nwhich pre-processes the message and dispatches it to functions in northbound interface or other user defined applications outside the core space.\n\n\nThe northbound interface is the key enabler of network programmability. The presented open design enables network developers to develop applications by using two different kinds of API exposed by the controller.\nWith the local API, applications are hosted in the same machine as the controller, and use the same programming language.\nHowever, it is not always the case to keep the application and controller in the same environment.\nThus as an alternative solution, the network API provides the possibility of remote communication.\nThe controller runs an API server to handle incoming requests from other network applications.\n\n\nDocumentation\n\n\n\n\nOverview\n\n\nBackground\n\n\nConvention\n\n\nCompatibility\n\n\nController-to-Switch Messaging\n\n\nMessage without Response\n\n\nMessage with Response\n\n\nEvents Delivery\n\n\nOpenFlow events\n\n\n\n\nPublish/Subscribe-like Delivery\n\n\n\n\n\n\nController-JSON-RPC-API\n\n\n\n\n\n\n1 Overview\n\n\nJSON-RPC-OF is a protocol designed for communicating with the !OpenFlow controller. It defines the JSON structures for !OpenFlow Messages and a set of methods that supported by the controller to control !OpenFlow switches. The interaction procedure is based on JSON-RPC. It uses an extended version of JSON as data format.\n\n\n2 Background\n\n\nAs the leading technology of Software Defined Networking, !OpenFlow plays an important role in current network research fields. The concept of providing programmable switches makes it suitable for elastic network construction and management.\n\n\nNetwork developers are able to control the behavior of switches by using the !OpenFlow controller, which communicates with the switches using !OpenFlow protocol. In current state of the art a variety of !OpenFlow controllers developed by different organisations and institutes are available. To ease the development of user\u2019s own network applications, many of them are providing a northbound interface that consists of commonly used controller functions, which are exposed through a well-defined API. However, most existing solutions put emphasize on the local programming interface that supports only applications written in the same programming language, and hosted in the same machine as the controller. Such kind of deep language and platform coupling impedes fast integration of remote applications with the controller. Moreover, the diversity of API in different implementations also makes the interoperation between controller applications. Thus it becomes quite crucial to have a standard that unifies the controller API and enables easy exposure of the functions through the network.\n\n\nDriven by these factors, we develop the JSON-RPC-OF protocol, which is targeting standardized communication with the !OpenFlow controller and easy extension of controller functions.\n\n\n3 Convention\n\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.\n\n\nThe data type system being used is based on JSON (RFC 4627). To ease the representation of !OpenFlow data, 5 extended types are introduced into our specification by putting restrictions on standard JSON types:\n\n\n'''hex''' - a hex number given as a JSON string, where the prefix \u201c0x\u201d is OPTIONAL\n\n\n'''enum''' - a JSON string whose value MUST be in a limit range\n\n\n'''hybrid''' - a hex or an enum\n\n\n'''bitmap''' - a JSON array that consists of enums\n\n\n'''bytearray''' - a JSON array that consists of decimal integers, with each integer between \n0, 255\n, or a hex byte string with the head being the first element of the array. When using hex representation, one byte MUST be represented by two hex digits.\n\n\nThe term \"message\" in this document, if not pointed-out specifically, refers to an !OpenFlow message defined in [\nhttps://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf\n OpenFlow specification].\n\n\nThe term \"user\" means a user of the controller, or a remote application that needs to access controller functions.\n\n\n4 Compatibility\n\n\nThe JSON-RPC-OF is based on [\nhttps://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf\n OpenFlow specification 1.4]. As version 1.4 distinguish itself from previous version in many newly added/enhanced features, the data types and methods described in this document MAY not work with other OpenFlow version.\n\n\nThe JSON-RPC-OF uses JSON-RPC as the carrier protocol. All the messages exchanged SHOULD be valid JSON-RPC objects. It is not compatible with JSON-RPC 1.0. The value of \u201cjsonrpc\u201d field in every object MUST be exactly the string \u201c2.0\u201d.\n\n\n5 Controller-to-Switch Messaging\n\n\nThe controller-to-switch messages are initiated by the controller and MAY or MAY not require a response from the switch. This part introduces the pattern of methods that being used to send such kind of messages to the switch.\n\n\n5.1 Message without response\n\n\nFor sending messages that do not have corresponding reply, if the \"id\" field in a JSON-RPC request is presented, the controller SHOULD include a \"msg_id\" field in the response object. The \"msg_id\" is an identifier representing the message being sent and SHOULD be global unique to the controller. Later if the message that being sent cause an OpenFlow error in switch side, which will be reported by an asynchronous message, the controller will include the same \"msg_id\" in the error message. The generation of \"msg_id\" is outside the scope of this specification.\n\n\nExample::\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nset_config\n,\n\n    \nparams\n:\n \n{\n\n        \ndpid\n:\n \n0xaabb000102030405\n,\n\n        \nflags\n:\n \n[\n\n            \nnormal\n,\n\n            \nreasm\n\n        \n],\n\n        \nmiss_send_len\n:\n \nno_buffer\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \n{\n\n        \nmsg_id\n:\n \n0x01020304\n\n    \n}\n\n\n}\n\n\n\n\n\n5.2 Message with response\n\n\nFor sending messages that will have responses, the response object of JSON-RPC will present the response message in \"reply\" field.\n\n\nExample::\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nget_config\n,\n\n    \nparams\n:\n \n{\n\n        \ndpid\n:\n \n0xaabb000102030405\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \n{\n\n        \nflags\n:\n \n[\n\n            \nnormal\n,\n\n            \nreasm\n\n        \n],\n\n        \nmiss_send_len\n:\n \nno_buffer\n\n    \n}\n\n\n}\n\n\n\n\n\n6 Events Delivery\n\n\n6.1 !OpenFlow Events\n\n\n!OpenFlow events can be either switch-related or connection-related.\n\n\nThe switch-related events refer to asynchronous messages. Asynchronous messages are sent without a controller soliciting them from a switch. Switches send asynchronous messages to controllers to denote a packet arrival, switch state change or error.\n\n\nThe connection-related events report state changes in the connections between controller and switches. When a connection is established, interrupted or closed, a corresponding event will be generated.\n\n\n6.2 !Publish/Subscribe\n\n\nTo inform the users about incoming !OpenFlow events, a !Publish/Subscribe-like mechanism is introduced. The controller acts as a publisher of all kinds of events. And users are able to subscribe/unsubscribe to the events interested in and getting notifications when such events occur.\n\n\nBefore doing any subscription, the user should first register themselves to the controller. In order to be located by the controller successfully, the user/the remote application SHOULD provide a valid callback address. Later when subscribed events comes, the controller will try to publish the events by sending JSON-RPC notification to the subscriber. The format and supported protocol type of the address are outside the scope of this specification.\n\n\nAfter successful registration, the user will get a \"sub_id\" from the controller, which is the identity of the subscriber. This \"sub_id\" SHOULD also be global unique to the controller.\n\n\nThe users are able to make subscription to interested events. By making or deleting subscriptions, the \"sub_id\" obtained during registration SHOULD be present, with which the controller can identify the subscriber properly.\n\n\nWhen a user done with all his activities in controller side, a deregistration procedure will be performed to inform the controller about the leaving of this subscriber.\n\n\nThe implementation of such publish and subscribe functions are outside the scope of this specification. However, in order to show the idea more clearly, a set of Examples are presented below.\n\n\nExamples::\nIn the following example, the user provides essential informations for the server to send back notifications. Such information contains the connection type, IP address, listened port and name of the notify method.\n Registration::\n\n--\n\n\n{\n\n    \njson-rpc\n:\n \n2.0\n,\n\n    \nid\n:\n \n1\n,\n\n    \nmethod\n:\n \nofc.sub.register\n,\n\n    \nparams\n:\n \n{\n\n        \ntype\n:\n \nUDP\n,\n\n        \nip\n:\n \n127.0.0.1\n,\n\n        \nport\n:\n \n9999\n,\n\n        \nnotify_method\n:\n \nnotify\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \n{\n\n        \nsub_id\n:\n \n0x12345678\n\n    \n}\n\n\n}\n\n\n\n\nSubscription::\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nofc.sub.subscribe\n,\n\n    \nparams\n:\n \n{\n\n        \nsub_id\n:\n \n0x12345678\n,\n\n        \nsubscriptions\n:\n \n[\n\n            \n{\n\n                \ndpid\n:\n \n0xaabb000102030405\n,\n\n                \nsubscriptions\n:\n \n[\n\n                    \nChannel_Closed\n,\n\n                    \nPacket_in\n\n                \n]\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \nOK\n\n\n}\n\n\n\n\nIf\n \nlater\n \ncomes\n \na\n \npacket_in\n \nmessage,\n \nthe\n \ncontroller\n \nwill\n \ntry\n \nto\n \nconnect\n \nto\n \nthe\n \nsubscriber\n \nand\n \nsend\n \na\n \njson-rpc\n \nnotification\n \n(through\n \ntcp://\n127.0\n.\n0.1\n:\n9999\n \nin\n \nthis\n \ncase)\n\n\n\n--\n\n\n{\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nnotify\n,\n\n    \nparams\n:\n \n{\n\n        \ntype\n:\n \nPacket_In\n,\n\n        \ndpid\n:\n \n0xaabb000102030405\n,\n\n        \nxid\n:\n \n0x01020304\n,\n\n        \nbuffer_id\n:\n \nno_buffer\n,\n\n        \nreason\n:\n \nno_match\n,\n\n        \ntable_id\n:\n \n0x01\n,\n\n        \ncookie\n:\n \n0x0102030405060708\n,\n\n        \nofp_match\n:\n \n[\n\n            \n{\n\n                \nclass\n:\n \nofb\n,\n\n                \nfield\n:\n \nin_port\n,\n\n                \nvalue\n:\n \n0x05\n\n            \n},\n\n            \n{\n\n                \nclass\n:\n \nofb\n,\n\n                \nfield\n:\n \nin_phy_port\n,\n\n                \nvalue\n:\n \n0x01\n\n            \n},\n\n            \n{\n\n                \nclass\n:\n \nofb\n,\n\n                \nfield\n:\n \narp_op\n,\n\n                \nvalue\n:\n \n0x01\n\n            \n}\n\n        \n],\n\n        \ndata\n:\n \n0xffffffffffff00\n\n\n                 1ff344e539080600\n\n\n                 0108000604000100\n\n\n                 1ff344e5390a9341\n\n    \n}\n\n\n}\n\n\n\n\nUnsubscribe::\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nofc.sub.unsubscribe\n,\n\n    \nparams\n:\n \n{\n\n        \nsub_id\n:\n \n0x12345678\n,\n\n        \nsubscriptions\n:\n \n[\n\n            \n{\n\n                \ndpid\n:\n \n0xaabb000102030405\n,\n\n                \nsubscriptions\n:\n \n[\n\n                    \nChannel_Closed\n,\n\n                    \nPacket_in\n\n                \n]\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \nOK\n\n\n}\n\n\n\n\nDeregistration::\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nmethod\n:\n \nofc.sub.deregister\n,\n\n    \nparams\n:\n \n{\n\n        \nsub_id\n:\n \n0x12345678\n\n    \n}\n\n\n}\n\n\n\n--\n\n\n{\n\n    \nid\n:\n \n1\n,\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \nOK\n\n\n}\n\n\n\n\n7 Extensions\n\n\nThe controller developers are able to develop their own extensions for the JSON-RPC-OF protocol by introducing new methods, only if such methods meet the requirements of standard JSON-RPC 2.0, and not violating the rules defined in this specification. By using the JSON format, more expressive data structures and APIs could be defined easily.", 
            "title": "Controller"
        }, 
        {
            "location": "/osdnc-controller/#opensdncore-controller", 
            "text": "", 
            "title": "OpenSDNCore Controller"
        }, 
        {
            "location": "/osdnc-controller/#introduction", 
            "text": "The OpenFlow Controller is one of the key components in current OpenFlow architecture. Before go through this guiding page, users are recommended to read the latest  OpenFlow Specification  and obtain a basic knowledge of !OpenFlow Technology, and how the Controller cooperates with !OpenFlow Switches.  The OpenFlow Controller is implemented as a wharf module named OFC. It is an intermediate components between the switch and higher layer applications. The following graph depicts a general view of the Controller architecture.   The !OpenFlow controller is the intermediate layer between network applications and !OpenFlow switches.\nIn our presented concept, the controller is based on a three-tier architecture shown in Figure \\ref{fig:controller}.\nThe three key components of the controller are (1) the core function layer, (2) northbound interface and (3) southbound interface.  The southbound interface handles the communication with !OpenFlow switches using !OpenFlow Protocol. It consists of two components: the !OpenFlow channel and !OpenFlow message codec.The !OpenFlow channel connects each switch to the controller. The !OpenFlow message codec, as its name shows, is used for encoding/decoding each time a message needs to be sent or received.  The core function layer contains a minimized set of functions required when deploying a controller.\nThe controller-to-Switch Message Pusher constructs new messages and push them to the !OpenFlow channel.\nFor asynchronous and symmetric messages coming from switch, the corresponding message handler will be invoked,\nwhich pre-processes the message and dispatches it to functions in northbound interface or other user defined applications outside the core space.  The northbound interface is the key enabler of network programmability. The presented open design enables network developers to develop applications by using two different kinds of API exposed by the controller.\nWith the local API, applications are hosted in the same machine as the controller, and use the same programming language.\nHowever, it is not always the case to keep the application and controller in the same environment.\nThus as an alternative solution, the network API provides the possibility of remote communication.\nThe controller runs an API server to handle incoming requests from other network applications.", 
            "title": "Introduction"
        }, 
        {
            "location": "/osdnc-controller/#documentation", 
            "text": "Overview  Background  Convention  Compatibility  Controller-to-Switch Messaging  Message without Response  Message with Response  Events Delivery  OpenFlow events   Publish/Subscribe-like Delivery    Controller-JSON-RPC-API", 
            "title": "Documentation"
        }, 
        {
            "location": "/osdnc-controller/#1-overview", 
            "text": "JSON-RPC-OF is a protocol designed for communicating with the !OpenFlow controller. It defines the JSON structures for !OpenFlow Messages and a set of methods that supported by the controller to control !OpenFlow switches. The interaction procedure is based on JSON-RPC. It uses an extended version of JSON as data format.", 
            "title": "1 Overview"
        }, 
        {
            "location": "/osdnc-controller/#2-background", 
            "text": "As the leading technology of Software Defined Networking, !OpenFlow plays an important role in current network research fields. The concept of providing programmable switches makes it suitable for elastic network construction and management.  Network developers are able to control the behavior of switches by using the !OpenFlow controller, which communicates with the switches using !OpenFlow protocol. In current state of the art a variety of !OpenFlow controllers developed by different organisations and institutes are available. To ease the development of user\u2019s own network applications, many of them are providing a northbound interface that consists of commonly used controller functions, which are exposed through a well-defined API. However, most existing solutions put emphasize on the local programming interface that supports only applications written in the same programming language, and hosted in the same machine as the controller. Such kind of deep language and platform coupling impedes fast integration of remote applications with the controller. Moreover, the diversity of API in different implementations also makes the interoperation between controller applications. Thus it becomes quite crucial to have a standard that unifies the controller API and enables easy exposure of the functions through the network.  Driven by these factors, we develop the JSON-RPC-OF protocol, which is targeting standardized communication with the !OpenFlow controller and easy extension of controller functions.", 
            "title": "2 Background"
        }, 
        {
            "location": "/osdnc-controller/#3-convention", 
            "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.  The data type system being used is based on JSON (RFC 4627). To ease the representation of !OpenFlow data, 5 extended types are introduced into our specification by putting restrictions on standard JSON types:  '''hex''' - a hex number given as a JSON string, where the prefix \u201c0x\u201d is OPTIONAL  '''enum''' - a JSON string whose value MUST be in a limit range  '''hybrid''' - a hex or an enum  '''bitmap''' - a JSON array that consists of enums  '''bytearray''' - a JSON array that consists of decimal integers, with each integer between  0, 255 , or a hex byte string with the head being the first element of the array. When using hex representation, one byte MUST be represented by two hex digits.  The term \"message\" in this document, if not pointed-out specifically, refers to an !OpenFlow message defined in [ https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf  OpenFlow specification].  The term \"user\" means a user of the controller, or a remote application that needs to access controller functions.", 
            "title": "3 Convention"
        }, 
        {
            "location": "/osdnc-controller/#4-compatibility", 
            "text": "The JSON-RPC-OF is based on [ https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf  OpenFlow specification 1.4]. As version 1.4 distinguish itself from previous version in many newly added/enhanced features, the data types and methods described in this document MAY not work with other OpenFlow version.  The JSON-RPC-OF uses JSON-RPC as the carrier protocol. All the messages exchanged SHOULD be valid JSON-RPC objects. It is not compatible with JSON-RPC 1.0. The value of \u201cjsonrpc\u201d field in every object MUST be exactly the string \u201c2.0\u201d.", 
            "title": "4 Compatibility"
        }, 
        {
            "location": "/osdnc-controller/#5-controller-to-switch-messaging", 
            "text": "The controller-to-switch messages are initiated by the controller and MAY or MAY not require a response from the switch. This part introduces the pattern of methods that being used to send such kind of messages to the switch.", 
            "title": "5 Controller-to-Switch Messaging"
        }, 
        {
            "location": "/osdnc-controller/#51-message-without-response", 
            "text": "For sending messages that do not have corresponding reply, if the \"id\" field in a JSON-RPC request is presented, the controller SHOULD include a \"msg_id\" field in the response object. The \"msg_id\" is an identifier representing the message being sent and SHOULD be global unique to the controller. Later if the message that being sent cause an OpenFlow error in switch side, which will be reported by an asynchronous message, the controller will include the same \"msg_id\" in the error message. The generation of \"msg_id\" is outside the scope of this specification.  Example::  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     method :   set_config , \n     params :   { \n         dpid :   0xaabb000102030405 , \n         flags :   [ \n             normal , \n             reasm \n         ], \n         miss_send_len :   no_buffer \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   { \n         msg_id :   0x01020304 \n     }  }", 
            "title": "5.1 Message without response"
        }, 
        {
            "location": "/osdnc-controller/#52-message-with-response", 
            "text": "For sending messages that will have responses, the response object of JSON-RPC will present the response message in \"reply\" field.  Example::  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     method :   get_config , \n     params :   { \n         dpid :   0xaabb000102030405 \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   { \n         flags :   [ \n             normal , \n             reasm \n         ], \n         miss_send_len :   no_buffer \n     }  }", 
            "title": "5.2 Message with response"
        }, 
        {
            "location": "/osdnc-controller/#6-events-delivery", 
            "text": "", 
            "title": "6 Events Delivery"
        }, 
        {
            "location": "/osdnc-controller/#61-openflow-events", 
            "text": "!OpenFlow events can be either switch-related or connection-related.  The switch-related events refer to asynchronous messages. Asynchronous messages are sent without a controller soliciting them from a switch. Switches send asynchronous messages to controllers to denote a packet arrival, switch state change or error.  The connection-related events report state changes in the connections between controller and switches. When a connection is established, interrupted or closed, a corresponding event will be generated.", 
            "title": "6.1 !OpenFlow Events"
        }, 
        {
            "location": "/osdnc-controller/#62-publishsubscribe", 
            "text": "To inform the users about incoming !OpenFlow events, a !Publish/Subscribe-like mechanism is introduced. The controller acts as a publisher of all kinds of events. And users are able to subscribe/unsubscribe to the events interested in and getting notifications when such events occur.  Before doing any subscription, the user should first register themselves to the controller. In order to be located by the controller successfully, the user/the remote application SHOULD provide a valid callback address. Later when subscribed events comes, the controller will try to publish the events by sending JSON-RPC notification to the subscriber. The format and supported protocol type of the address are outside the scope of this specification.  After successful registration, the user will get a \"sub_id\" from the controller, which is the identity of the subscriber. This \"sub_id\" SHOULD also be global unique to the controller.  The users are able to make subscription to interested events. By making or deleting subscriptions, the \"sub_id\" obtained during registration SHOULD be present, with which the controller can identify the subscriber properly.  When a user done with all his activities in controller side, a deregistration procedure will be performed to inform the controller about the leaving of this subscriber.  The implementation of such publish and subscribe functions are outside the scope of this specification. However, in order to show the idea more clearly, a set of Examples are presented below.  Examples::\nIn the following example, the user provides essential informations for the server to send back notifications. Such information contains the connection type, IP address, listened port and name of the notify method.\n Registration:: --  { \n     json-rpc :   2.0 , \n     id :   1 , \n     method :   ofc.sub.register , \n     params :   { \n         type :   UDP , \n         ip :   127.0.0.1 , \n         port :   9999 , \n         notify_method :   notify \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   { \n         sub_id :   0x12345678 \n     }  }   Subscription:: --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     method :   ofc.sub.subscribe , \n     params :   { \n         sub_id :   0x12345678 , \n         subscriptions :   [ \n             { \n                 dpid :   0xaabb000102030405 , \n                 subscriptions :   [ \n                     Channel_Closed , \n                     Packet_in \n                 ] \n             } \n         ] \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   OK  }  If   later   comes   a   packet_in   message,   the   controller   will   try   to   connect   to   the   subscriber   and   send   a   json-rpc   notification   (through   tcp:// 127.0 . 0.1 : 9999   in   this   case)  --  { \n     jsonrpc :   2.0 , \n     method :   notify , \n     params :   { \n         type :   Packet_In , \n         dpid :   0xaabb000102030405 , \n         xid :   0x01020304 , \n         buffer_id :   no_buffer , \n         reason :   no_match , \n         table_id :   0x01 , \n         cookie :   0x0102030405060708 , \n         ofp_match :   [ \n             { \n                 class :   ofb , \n                 field :   in_port , \n                 value :   0x05 \n             }, \n             { \n                 class :   ofb , \n                 field :   in_phy_port , \n                 value :   0x01 \n             }, \n             { \n                 class :   ofb , \n                 field :   arp_op , \n                 value :   0x01 \n             } \n         ], \n         data :   0xffffffffffff00                   1ff344e539080600                   0108000604000100                   1ff344e5390a9341 \n     }  }   Unsubscribe:: --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     method :   ofc.sub.unsubscribe , \n     params :   { \n         sub_id :   0x12345678 , \n         subscriptions :   [ \n             { \n                 dpid :   0xaabb000102030405 , \n                 subscriptions :   [ \n                     Channel_Closed , \n                     Packet_in \n                 ] \n             } \n         ] \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   OK  }   Deregistration:: --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     method :   ofc.sub.deregister , \n     params :   { \n         sub_id :   0x12345678 \n     }  }  --  { \n     id :   1 , \n     jsonrpc :   2.0 , \n     result :   OK  }", 
            "title": "6.2 !Publish/Subscribe"
        }, 
        {
            "location": "/osdnc-controller/#7-extensions", 
            "text": "The controller developers are able to develop their own extensions for the JSON-RPC-OF protocol by introducing new methods, only if such methods meet the requirements of standard JSON-RPC 2.0, and not violating the rules defined in this specification. By using the JSON format, more expressive data structures and APIs could be defined easily.", 
            "title": "7 Extensions"
        }, 
        {
            "location": "/opensdncore-nb-api/", 
            "text": "JSON-RPC-OpenFlow\n\n\nNotations\n\n\nIn addition to the standard JSON data types, several special types are defined to improve the expressiveness of parameters in a RPC call. The following table shows the detail of each type.\n\n\nhex\n\n\na hex number given as a JSON string. The \"0x\" prefix is optional here.\n\n\nExample\n\n\n        \nhex\n:\n0xabcd1234\n\n\n\n\n\n\nhybrid\n\n\ncould be either a hex or a string. Must be given as a JSON string.\n Example\n\n\n        \nhybrid\n:\n0xabcd1234\n\n        \nhybrid\n:\nmax\n\n\n\n\n\n\nenum\n\n\na JSON string whose value can just be in a limit range. The range will be defined in an array with each possible value and its meaning, and the name of the array will be given in upper case.\n Example\n\n\n        \nenum\n:\nin_port\n\n\n        where the range is given in\n        \nOFPP\n: [\n            {\n                \nenum_value\n: \nmax\n,\n                \nenum_meaning\n: \nmax port the switch can support\n\n            },\n            {\n                \nenum_value\n: \nin_port\n,\n                \nenum_meaning\n: \nsend the packet out the inpurt port. This reserved port must be explicitly used in order to send back out of the input port\n\n            },\n            {\n                \nenum_value\n: \ntable\n,\n                \nenum_meaning\n: \nsubmit the packet to the first flow table. Can used only in packet out message\n\n            }\n            ...\n        ]\n\n\n\n\n\nbitmap\n\n\na JSON array that consists of enum values\n Example\n\n\n        \nbitmap\n:[\n            \nport_down\n,\n            \nno_fwd\n,\n            \nno_packet_in\n\n        ]\n\n        where the range is given in\n        \nOFPPC\n: [\n            {\n                \nenum_value\n: \nport_down\n,\n                \nenum_meaning\n: \nport is administratively down\n\n            },\n            {\n                \nenum_value\n: \nno_recv\n,\n                \nenum_meaning\n: \ndrop all packets received by port\n\n            },\n            {\n                \nenum_value\n: \nno_fwd\n,\n                \nenum_meaning\n: \ndrop packets forwarded to port\n\n            },\n            {\n                \nenum_value\n: \nno_packet_in\n,\n                \nenum_meaning\n: \ndo not send packet-in message for port \n\n            }\n            ...\n        ]\n\n\n\n\n\nbytearray\n\n\na JSON array that consists of decimal numbers, with each number between \n0, 255\n, or a hex byte string with the first byte being the first element of the array. Notice that by using hex representation, one byte consists of two hex digits.\n Example\n\n\n        The following two fields represent the same byte array:\n        \nbytearray\n:[1,2,3,4,5,6]\n        \nbytearray\n:\n0x010203040506\n\n\n\n\n\n\n\n\nData Structures\n\n\nofp_match\n\n\nan array consists of ofp_oxm objects\n\n\nExample\n\n\n    [\n        {\n            \nmatch_class\n: \nopenflow_basic\n,\n            \nfield\n: \nipv4_src\n,\n            \nmask\n: \n255.255.255.0\n,\n            \nvalue\n: \n192.168.1.1\n\n        },\n        {\n            \nmatch_class\n: \nopenflow_basic\n,\n            \nfield\n: \ntcp_src\n,\n            \nvalue\n: \n5566\n\n        }\n    ]\n\n\n\n\n\n\n\nofp_oxm\n\n\nofp_oxm\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nmatch_class\n\n\noxm matching class\n\n\nenum\n\n\none of OFPXMC enumeration\n\n\n\n\n\n\nfield\n\n\nmatch field\n\n\nenum\n\n\none of OFPXMT_OFB enumeration\n\n\n\n\n\n\nvalue\n\n\nmatch value\n\n\nstring\n\n\nUnless specified, this value should be given in conventional form according to its type(e.g. TCP/UDP/SCTP ports should be given in decimal but as string\n\n\n\n\n\n\nmask\n\n\nmatch mask\n\n\nstring\n\n\nthe same length as value\n\n\n\n\n\n\n\n\nOFPXMC\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nnxm0\n\n\nbackward compatibility with NXM\n\n\n\n\n\n\nnxm1\n\n\nbackward compatibility with NXM\n\n\n\n\n\n\nopenflow_basic\n\n\nbasic class for OpenFlow\n\n\n\n\n\n\nexperimenter\n\n\nexperimenter class\n\n\n\n\n\n\n\n\nOFPXMT_OFB\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nin_port\n\n\nswitch input port\n\n\n\n\n\n\nin_phy_port\n\n\nswitch physical input port\n\n\n\n\n\n\nmetadata\n\n\nmetadata passed between tables\n\n\n\n\n\n\neth_dst\n\n\nethernet destination address\n\n\n\n\n\n\neth_src\n\n\nethernet source address\n\n\n\n\n\n\neth_type\n\n\nethernet frame type\n\n\n\n\n\n\nvlan_id\n\n\nVLAN id\n\n\n\n\n\n\nvlan_pcp\n\n\nVLAN priority\n\n\n\n\n\n\nip_dscp\n\n\nIP DSCP(6 bits in ToS field)\n\n\n\n\n\n\nip_ecn\n\n\nIP ECN(2 bits in ToS field)\n\n\n\n\n\n\nip_proto\n\n\nIP protocol\n\n\n\n\n\n\nipv4_src\n\n\nIPv4 source address\n\n\n\n\n\n\nipv4_dst\n\n\nIPv4 destination address\n\n\n\n\n\n\ntcp_src\n\n\ntcp source port\n\n\n\n\n\n\ntcp_dst\n\n\ntcp destination port\n\n\n\n\n\n\nudp_src\n\n\nudp source port\n\n\n\n\n\n\nudp_dst\n\n\nudp destination port\n\n\n\n\n\n\nsctp_src\n\n\nsctp source port\n\n\n\n\n\n\nsctp_dst\n\n\nsctp destination port\n\n\n\n\n\n\nicmpv4_type\n\n\nICMP type\n\n\n\n\n\n\nicmpv4_code\n\n\nICMP code\n\n\n\n\n\n\narp_op\n\n\nARP opcode\n\n\n\n\n\n\narp_spa\n\n\nARP source IPv4 address\n\n\n\n\n\n\narp_tpa\n\n\nARP target IPv4 address\n\n\n\n\n\n\narp_sha\n\n\nARP source hardware address\n\n\n\n\n\n\narp_tha\n\n\nARP target hardware address\n\n\n\n\n\n\nipv6_src\n\n\nIPv6 source address\n\n\n\n\n\n\nipv6_dst\n\n\nIPv6 destination address\n\n\n\n\n\n\nipv6_flabel\n\n\nIPv6 flow label\n\n\n\n\n\n\nicmpv6_type\n\n\nICMP type\n\n\n\n\n\n\nicmpv6_code\n\n\nICMP code\n\n\n\n\n\n\nipv6_nd_target\n\n\ntarget address for ND\n\n\n\n\n\n\nipv6_nd_sll\n\n\nsource link-layer for ND\n\n\n\n\n\n\nipv6_nd_tll\n\n\ntarget link-layer for ND\n\n\n\n\n\n\nmpls_label\n\n\nMPLS lable\n\n\n\n\n\n\nmpls_tc\n\n\nMPLS TC\n\n\n\n\n\n\nmpls_bos\n\n\nMPLS BoS bit\n\n\n\n\n\n\npbb_isid\n\n\nPBB I-SID\n\n\n\n\n\n\ntunnel_id\n\n\nlogical port metadata\n\n\n\n\n\n\nipv6_exthdr\n\n\nIPv6 extension header pseudo-field\n\n\n\n\n\n\npbb_uca\n\n\nPBB UCA header fields\n\n\n\n\n\n\n\n\nExample\n\n\n        {\n            \nmatch_class\n: \nopenflow_basic\n,\n            \nfield\n: \nipv4_src\n,\n            \nmask\n: \n255.255.255.0\n,\n            \nvalue\n: \n192.168.1.1\n\n        }\n\n\n\n\n\n\n\nofp_instructions\n\n\nconsists of several objects which represent different kinds of instructions.\nNotice that each instruction can appear only once in an instruction list.\n\n\ngoto_table\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\ntable_id\n\n\nset next table in the lookup pipeline\n\n\nnumber\n\n\na number between [0, 255]\n\n\n\n\n\n\n\n\nwrite_metadata\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nmetadata\n\n\nmetadata value to write\n\n\nhex\n\n\na 64-bit hex number\n\n\n\n\n\n\nmetadata_mask\n\n\nmetadata write bitmask\n\n\nhex\n\n\na 64-bit hex number\n\n\n\n\n\n\n\n\nmeter\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nmeter_id\n\n\nmeter instance\n\n\nhybrid\n\n\na 32-bit hex number between [0,0xffff0000] or one of OFPM enumeration\n\n\n\n\n\n\n\n\nexperimenter\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nexp_id\n\n\nexperimenter id\n\n\nhex\n\n\na 32-bit hex number\n\n\n\n\n\n\nexp_data\n\n\nexperimenter-defined additional data\n\n\nbytearray\n\n\na byte array\n\n\n\n\n\n\n\n\napply_actions\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nofp_actions\n\n\nactions to apply\n\n\nobject\n\n\nthe same form as ofp_actions object\n\n\n\n\n\n\n\n\nwrite_actions\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nofp_actions\n\n\nactions to write\n\n\nobject\n\n\nthe same form as ofp_actions object\n\n\n\n\n\n\n\n\nclear_actions\n\n\nnull\n\n\nOFPM\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmax\n\n\nlast usable meter\n\n\n\n\n\n\nslowpath\n\n\nmeter for slow datapath\n\n\n\n\n\n\ncontroller\n\n\nmeter for controller connection\n\n\n\n\n\n\nall\n\n\nrepresents all meters for stat requests commands\n\n\n\n\n\n\n\n\nExample\n\n\n    \nofp_instructions\n: {\n        \nwrite_actions\n: {\n            \noutput\n: {\n                \nport_no\n: \n0x0f\n\n            }\n        },\n        \nmeter\n:{\n            \nmeter_id\n:\n0x01020304\n\n        }\n    }\n\n\n\n\n\n\n\nofp_actions\n\n\nconsists of several objects which represent different kinds of actions.\nNotice that each action can appear only once in an action list.\n\n\noutput\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nport_no\n\n\noutput port\n\n\nhybrid\n\n\na 32-bit number between [0, 0xffffff00] or one of OFPP enumeration\n\n\n\n\n\n\nmax_len\n\n\nmax length to send to controller\n\n\nhybrid\n\n\na 16-bit hex number between [0, 0xffe5] or one of OFPCML enumeration\n\n\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\ngroup_id\n\n\ngroup id\n\n\nhybrid\n\n\na 32-bit hex number between [0, 0xffffff00] or one of OFPG enumeration\n\n\n\n\n\n\n\n\nset_queue\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nqueue_id\n\n\nqueue id for the packet\n\n\nhex\n\n\na 32-bit hex number\n\n\n\n\n\n\n\n\nset_mpls_ttl\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nmpls_ttl\n\n\nthe MPLS TTL to set\n\n\nnumber\n\n\na number between [0, 255]\n\n\n\n\n\n\n\n\nset_nw_ttl\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nnw_ttl\n\n\nthe NW TTL to set\n\n\nnumber\n\n\na number between [0, 255]\n\n\n\n\n\n\n\n\npush_vlan\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nethertype\n\n\nthe Ethertype of the new tag\n\n\nhex\n\n\na 16-bit hex number\n\n\n\n\n\n\n\n\npush_pbb\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nethertype\n\n\nthe Ethertype of the new tag\n\n\nhex\n\n\na 16-bit hex number\n\n\n\n\n\n\n\n\npush_mpls\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nethertype\n\n\nthe Ethertype of the new tag\n\n\nhex\n\n\na 16-bit hex number\n\n\n\n\n\n\n\n\npop_mpls\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nethertype\n\n\nthe Ethertype of the MPLS payload\n\n\nhex\n\n\na 16-bit hex number\n\n\n\n\n\n\n\n\nset_field\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nofp_oxm\n\n\nthe field to set described by a single oxm\n\n\nobject\n\n\na single object having the same form as ofp_oxm object\n\n\n\n\n\n\n\n\nexperimenter\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nexp_id\n\n\nexperimenter id\n\n\nhex\n\n\na 32-bit hex number\n\n\n\n\n\n\nexp_data\n\n\nexperimenter-defined additional data\n\n\nbytearray\n\n\na byte array\n\n\n\n\n\n\n\n\ncopy_ttl_out\n\n\nnull\n\n\ncopy_ttl_in\n\n\nnull\n\n\ndec_mpls_ttl\n\n\nnull\n\n\ndec_nw_ttl\n\n\nnull\n\n\npop_pbb\n\n\nnull\n\n\npop_vlan\n\n\nnull\n\n\nOFPCML\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmax\n\n\nmaximun max_len value which can be used to request a specific byte length\n\n\n\n\n\n\nno_buffer\n\n\nindicates that no buffering should be applied and the whole packet is to be sent to the controller\n\n\n\n\n\n\n\n\nOFPG\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmax\n\n\nlast usable group\n\n\n\n\n\n\nall\n\n\nrepresents all groups for group delete commands\n\n\n\n\n\n\nany\n\n\nwildcard group used only for flow stats requests. selects all flows regardless of group (including flows with no group)\n\n\n\n\n\n\n\n\nExample\n\n\n                \nofp_instructions\n: {\n                    \nwrite_actions\n: [\n                        {\n                            \nset_field\n: {\n                                \nofp_oxm\n: {\n                                    \nmatch_class\n: \nopenflow_basic\n,\n                                    \nfield\n: \nipv4_src\n,\n                                    \nvalue\n: \n11.0.0.1\n\n                                }\n                            }\n                        },\n                        {\n                            \nset_field\n: {\n                                \nofp_oxm\n: {\n                                    \nmatch_class\n: \nopenflow_basic\n,\n                                    \nfield\n: \nipv4_dst\n,\n                                    \nvalue\n: \n11.0.0.2\n\n                                }\n                            }\n                        },\n                        {\n                            \noutput\n: {\n                                \nport_no\n: \n0x02\n\n                            }\n                        }\n                    ]\n                }\n\n\n\n\n\n\n\nSwitch Management\n\n\nlist.channels\n\n\nlist datapath id of switches connecting to this controller\n  Params\n\n\nnull\n\n\nResult\n\n\na JSON array consists of dpids(64-bit hex number given as string)\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nlist.channels\n,\n        \nparams\n: null\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: [\n            \n0xaabb000102030405\n,\n            \n0xccdd000102030405\n,\n            \n0x1234567890abcdef\n\n         ]\n    }\n\n\n\n\n\n\n\nController-to-Switch Messaging\n\n\nofc.send.get_config\n\n\nget switch configuration\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\na JSON object containing switch configuration information\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nflags\n\n\nset of configuration flags\n\n\nbitmap\n\n\npossible values enumerated in OFPC_FRAG\n\n\n\n\n\n\nmiss_send_len\n\n\nmax bytes of packet that datapath should send to the controller.\n\n\nhybrid\n\n\na 16-bit hex number between [0, 0xffe5] or one of OFPCML enumeration\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.get_config\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: {\n            \nflags\n: [\n                \nnormal\n,\n                \nreasm\n\n            ],\n            \nmiss_send_len\n: \nno_buffer\n\n        }\n    }\n\n\n\n\n\nOFPCML\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmax\n\n\nmax byte length\n\n\n\n\n\n\nno_buffer\n\n\nindicates that no buffering should be applied and the whole packet is to be sent to the controller\n\n\n\n\n\n\n\n\nOFPC_FRAG\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nnormal\n\n\nno special handling for fragments\n\n\n\n\n\n\ndrop\n\n\ndrop fragments\n\n\n\n\n\n\nreasm\n\n\nreassemble\n\n\n\n\n\n\n\n\n\n\nofc.send.flow_mod\n\n\nsend a flow_mod message\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\nofp_flow_mod\n\n\nthe flow_mod message\n\n\nobject\n\n\nthe same as described in ofp_flow_mod object\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nmsg_id\n\n\na unique ID identifying this request\n\n\nhex\n\n\nglobal unique to the controller\n\n\n\n\n\n\n\n\n\"ofp_flow_mod\"::\n\n\na JSON object representing a flow_mod message\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ntable_id\n\n\ntable id to be modified\n\n\nhybrid\n\n\na 8-bit hex number between [0, 0xfe] or \"all\" for all tables\n\n\ntrue\n\n\n\n\n\n\ncommand\n\n\ncommand to apply\n\n\nenum\n\n\none of OFPFC enumeration\n\n\ntrue\n\n\n\n\n\n\nidle_timeout\n\n\nidle time before discarding (seconds)\n\n\nnumber\n\n\n\n\nfalse\n\n\n\n\n\n\nhard_timeout\n\n\nmax time before discarding (seconds)\n\n\nnumber\n\n\n\n\nfalse\n\n\n\n\n\n\npriority\n\n\npriority level of flow entry\n\n\nnumber\n\n\n\n\nfalse\n\n\n\n\n\n\ncookie\n\n\nrequire matching entries to contain this cookie value\n\n\nhex\n\n\na 64-bit hex number\n\n\nfalse\n\n\n\n\n\n\ncookie_mask\n\n\ncookie mask\n\n\nhex\n\n\na 64-bit hex number\n\n\nfalse\n\n\n\n\n\n\nbuffer_id\n\n\nbuffered packet to apply to. Not meaningful for delete commands\n\n\nhybrid\n\n\na 32-bit hex number or \"no_buffer\"\n\n\nfalse\n\n\n\n\n\n\nout_port\n\n\nfor delete commands, require matching entries to include this as an output port\n\n\nhybrid\n\n\na 32-bit hex number as described in ofp_port object, or \"any\" which indicates no restriction\n\n\nfalse\n\n\n\n\n\n\nout_group\n\n\nfor delete commands, require matching entries to include this as an output group\n\n\nhybrid\n\n\na 32-bit hex number, or \"any\" which indicates no restriction\n\n\nfalse\n\n\n\n\n\n\nflags\n\n\nflow entry configuration flags\n\n\nbitmap\n\n\npossible values enumerated in OFPFF\n\n\nfalse\n\n\n\n\n\n\nimportance\n\n\neviction precedence\n\n\nnumber\n\n\na number between [0, 2^ 16 ]\n\n\nfalse\n\n\n\n\n\n\nofp_match\n\n\nmatching rules\n\n\narray\n\n\nconsists of ofp_oxm objects\n\n\nfalse\n\n\n\n\n\n\nofp_instructions\n\n\ninstructions to apply when matched\n\n\nobject\n\n\nthe same as  object\n\n\nfalse\n\n\n\n\n\n\n\n\nOFPFF\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsend_flow_rem\n\n\nsend flow removed message when flow expires or is deleted\n\n\n\n\n\n\ncheck_overlap\n\n\ncheck for overlapping entries first\n\n\n\n\n\n\nreset_counts\n\n\nreset flow packet and byte counts\n\n\n\n\n\n\nno_pkt_counts\n\n\ndon't keep track of packet count\n\n\n\n\n\n\nno_byt_counts\n\n\ndon't keep track of byte count\n\n\n\n\n\n\n\n\nOFPFC\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nadd\n\n\nnew flow\n\n\n\n\n\n\nmodify\n\n\nmodify all matching flows\n\n\n\n\n\n\nmodify_strict\n\n\nmodify entry strictly matching wildcards and priority\n\n\n\n\n\n\ndelete\n\n\ndelete all matching flows\n\n\n\n\n\n\ndelete_strict\n\n\ndelete entry strictly matching wildcars and priority\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.flow_mod\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n,\n            \nofp_flow_mod\n: {\n                \ncommand\n: \nadd\n,\n                \nflags\n: [\n                    \nreset_counts\n,\n                    \nsend_flow_rem\n\n                ],\n                \nidle_timeout\n: 14,\n                \nofp_instructions\n: {\n                    \napply_actions\n: {\n                        \noutput\n: {\n                            \nport_no\n: \n0x0f\n\n                        }\n                    }\n                },\n                \nofp_match\n: [\n                    {\n                        \nmatch_class\n: \nopenflow_basic\n,\n                        \nfield\n: \nipv4_src\n,\n                        \nmask\n: \n255.255.255.0\n,\n                        \nvalue\n: \n192.168.1.1\n\n                    }\n                ],\n                \npriority\n: 18,\n                \ntable_id\n: \n0x0f\n\n            }\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: {\n            \nmsg_id\n: \n0x01020304\n\n        }\n    }\n\n\n\n\n\n\n\nofc.send.barrier\n\n\nsend barrier message, used to ensure message dependencies have been met or wants to receive notifications for completed operations.\nThe switch will continue to execute new commands only if all the messages before the barrier have been processed\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\"dpid\"\n\n\nswitch datapath id\n\n\nstring\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\na JSON String. \"Barrier Reply\" on success.\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.barrier\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: \nBarrier Reply\n\n    }\n\n\n\n\n\n\n\nofc.send.role_request\n\n\nused to query or change the role of controller\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\nrole\n\n\nnew role that the controller wants to assume\n\n\nenum\n\n\none of OFPCR enumeration\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nrestriction\n\n\n\n\n\n\n\n\n\n\nrole\n\n\nnew role that accepted by switch. if the request is no_change, then the original role will be returned\n\n\nenum\n\n\none of OFPCR enumeration. This field exists only if the new role is accepted by switch.\n\n\n\n\n\n\n\n\nOFPCR\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nnochange\n\n\ndon't change current role\n\n\n\n\n\n\nequal\n\n\ndefault role, full access\n\n\n\n\n\n\nmaster\n\n\nfull access, at most one master\n\n\n\n\n\n\nslave\n\n\nread-only access\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.role_request\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n,\n            \nrole\n: \nno_change\n\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: {\n            \nrole\n: \nequal\n\n        }\n    }\n\n\n\n\n\n\n\nofc.send.multipart.flow\n\n\nget statistic information about individual flow entries\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\nofp_multipart_flow\n\n\na multipart_flow message\n\n\nobject\n\n\nformat described in\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\na JSON object consists of ofp_flow_stats object, whose format is introduced below\n\n\nProperties of \"ofp_multipart_flow\" object\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ntable_id\n\n\ntable id\n\n\nhybrid\n\n\na 8-bit hex number between [0, 0xfe] or \"all\" for all tables\n\n\ntrue\n\n\n\n\n\n\nout_port\n\n\nRequire matching entries to include this as an output port.\n\n\nhybrid\n\n\na 32-bit hex number as described in ofp_port object, or \"any\" which indicates no restriction\n\n\nfalse\n\n\n\n\n\n\nout_group\n\n\nRequire matching entries to include this as an output group\n\n\nhybrid\n\n\na 32-bit hex number, or \"any\" which indicates no restriction\n\n\nfalse\n\n\n\n\n\n\ncookie\n\n\nRequire matching entries to contain this cookie value\n\n\nhex\n\n\na 64-bit hex number\n\n\nfalse\n\n\n\n\n\n\ncookie_mask\n\n\nRequire matching entries to contain this cookie value\n\n\nhex\n\n\na 64-bit hex number,mask used to restrict the cookie bits that must match.\n\n\nfalse\n\n\n\n\n\n\nofp_match\n\n\nmatching rules\n\n\narray\n\n\nconsists of ofp_oxm objects\n\n\nfalse\n\n\n\n\n\n\n\n\nProperties of \"ofp_flow_stats\" object\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\n\n\n\n\n\n\n\n\ntable_id\n\n\ntable id the flow came from\n\n\nhybrid\n\n\na 8-bit hex number between [0, 0xfe] or \"all\" for all tables\n\n\n\n\n\n\npacket_count\n\n\nnumber of packet in flow\n\n\nnumber\n\n\n\n\n\n\n\n\nbyte_count\n\n\nnumber of byte in flow\n\n\nnumber\n\n\n\n\n\n\n\n\nidle_timeout\n\n\nidle time before discarding (seconds)\n\n\nnumber\n\n\n\n\n\n\n\n\nhard_timeout\n\n\nmax time before discarding (seconds)\n\n\nnumber\n\n\n\n\n\n\n\n\nduration_sec\n\n\ntime flow has been alive in seconds\n\n\nnumber\n\n\n\n\n\n\n\n\nduration_nsec\n\n\ntime flow has been alive in nanoseconds beyond duration_sec\n\n\nnumber\n\n\n\n\n\n\n\n\npriority\n\n\npriority level of flow entry\n\n\nnumber\n\n\n\n\n\n\n\n\nflags\n\n\nflow entry configuration flags\n\n\nbitmap\n\n\npossible values enumerated in OFPFF\n\n\n\n\n\n\ncookie\n\n\nrequire matching entries to contain this cookie value\n\n\nhex\n\n\na 64-bit hex number\n\n\n\n\n\n\nimportance\n\n\neviction precedence\n\n\nnumber\n\n\na number between [0, 2^ 16 ]\n\n\n\n\n\n\nofp_match\n\n\nmatching rules\n\n\narray\n\n\nconsists of ofp_oxm objects\n\n\n\n\n\n\nofp_instructions\n\n\ninstructions to apply when matched\n\n\nobject\n\n\nthe same as ofp_instructions object\n\n\n\n\n\n\n\n\nOFPFF\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsend_flow_rem\n\n\nsend flow removed message when flow expires or is deleted\n\n\n\n\n\n\ncheck_overlap\n\n\ncheck for overlapping entries first\n\n\n\n\n\n\nreset_counts\n\n\nreset flow packet and byte counts\n\n\n\n\n\n\nno_pkt_counts\n\n\ndon't keep track of packet count\n\n\n\n\n\n\nno_byt_counts\n\n\ndon't keep track of byte count\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.multipart.flow\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n,\n            \nofp_multipart_flow\n: {\n                \nofp_match\n: [\n                    {\n                        \nmatch_class\n: \nopenflow_basic\n,\n                        \nfield\n: \nipv4_src\n,\n                        \nmask\n: \n255.255.255.0\n,\n                        \nvalue\n: \n192.168.1.1\n\n                    }\n                ],\n                \ntable_id\n: \n0x0f\n\n            }\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: [\n            {\n                \ntable_id\n: \n0xe0\n,\n                \npacket_count\n: 29348,\n                \nbyte_count\n: 7039684,\n                \nidle_timeout\n: 3,\n                \nhard_timeout\n: 15,\n                \nduration_sec\n: 10,\n                \nduration_nsec\n: 56,\n                \npriority\n: 19,\n                \nimportance\n: 28,\n                \ncookie\n: \n0x1234567890abcdef\n,\n                \nflags\n: [\n                    \ncheck_overlap\n,\n                    \nsend_flow_rem\n\n                ],\n                \nofp_match\n: [\n                    {\n                        \nmatch_class\n: \nopenflow_basic\n,\n                        \nfield\n: \nipv4_src\n,\n                        \nmask\n: \n255.255.255.0\n,\n                        \nvalue\n: \n192.168.1.1\n\n                    },\n                    {\n                        \nmatch_class\n: \nopenflow_basic\n,\n                        \nfield\n: \ntcp_src\n,\n                        \nvalue\n: \n5566\n\n                    }\n                ],\n                \nofp_instructions\n: {\n                    \napply_actions\n: {\n                        \noutput\n: {\n                            \nport_no\n: \n0x0f\n\n                        }\n                    }\n                }\n            },\n            {\n                \ntable_id\n: \n0xe0\n,\n                \npacket_count\n: 29348,\n                \nbyte_count\n: 7039684,\n                \nidle_timeout\n: 7,\n                \nhard_timeout\n: 9,\n                \nduration_sec\n: 2,\n                \nduration_nsec\n: 99,\n                \npriority\n: 37,\n                \nimportance\n: 89,\n                \ncookie\n: \n0x000000000000000f\n,\n                \nflags\n: [],\n                \nofp_match\n: [\n                    {\n                        \nmatch_class\n: \nopenflow_basic\n,\n                        \nfield\n: \nipv4_src\n,\n                        \nmask\n: \n255.255.255.0\n,\n                        \nvalue\n: \n192.168.1.1\n\n                    }\n                ],\n                \nofp_instructions\n: {\n                    \ngoto_table\n: {\n                        \ntable_id\n: \n0x0f\n\n                    }\n                }\n            }\n        ]\n    }\n\n\n\n\n\n\n\nofc.send.multipart.port_stats\n\n\nget aggregate statistic information about ports\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\nport_no\n\n\nport that this queue attaching to, should refer to a valid physical port\n\n\nhybrid\n\n\na 32-bit number between [0, 0xffffff00) or \"all\" for all ports\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\n\n\n\n\n\n\n\n\nport_no\n\n\nport that this queue attaching to, should refer to a valid physical port\n\n\nhybrid\n\n\na 32-bit number between [0, 0xffffff00) or \"any\" for all ports\n\n\n\n\n\n\ntx_packets\n\n\nnumber of transmitted packets\n\n\nnumber\n\n\n\n\n\n\n\n\nrx_packets\n\n\nnumber of received packets\n\n\nnumber\n\n\n\n\n\n\n\n\ntx_bytes\n\n\nnumber of transmitted bytes\n\n\nnumber\n\n\n\n\n\n\n\n\nrx_bytes\n\n\nnumber of received bytes\n\n\nnumber\n\n\n\n\n\n\n\n\ntx_dropped\n\n\nnumber of dropped packets\n\n\nnumber\n\n\n\n\n\n\n\n\nrx_dropped\n\n\nnumber of dropped packets\n\n\nnumber\n\n\n\n\n\n\n\n\ntx_errors\n\n\nNumber of transmit errors.\n\n\nnumber\n\n\na super-set of more specific transmit errors and should be greater than or equal to the sum of all tx_*_err values (none currently defined.)\n\n\n\n\n\n\nrx_errors\n\n\nNumber of receive errors.\n\n\nnumber\n\n\na super-set of more specific receive errors and should be greater than or equal to the sum of all rx_*_err values (none currently defined.)\n\n\n\n\n\n\nduration_sec\n\n\ntime port has been alive in seconds\n\n\nnumber\n\n\n\n\n\n\n\n\nduration_nsec\n\n\ntime port has been alive in nanoseconds beyond duration_sec\n\n\nnumber\n\n\n\n\n\n\n\n\nproperties\n\n\nproperty list of port type specific statistics\n\n\narray\n\n\nconsists of ofp_port_stats_prop objects\n\n\n\n\n\n\n\n\nProperties of ofp_port_stats_prop object\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nport type\n\n\nenum\n\n\none of OFPPSPT enumeration\n\n\n\n\n\n\nrx_frame_err\n\n\nnumber of frame alignment errors\n\n\nnumber\n\n\nonly valid for type OFPPSPT_ETHERNET\n\n\n\n\n\n\nrx_crc_err\n\n\nnumber of CRC errors\n\n\nnumber\n\n\nonly valid for type OFPPSPT_ETHERNET\n\n\n\n\n\n\nrx_over_err\n\n\nnumber of packets with RX overrun\n\n\nnumber\n\n\nonly valid for type OFPPSPT_ETHERNET\n\n\n\n\n\n\ncollisions\n\n\nnumber of collisions\n\n\nnumber\n\n\nonly valid for type OFPPSPT_ETHERNET\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflags\n\n\nfeatures enabled by the port\n\n\nbitmap\n\n\npossible values enumerated in OFPOSF\n\n\n\n\n\n\n\n\n\n\ntx_freq_lmda\n\n\ncurrent TX frequency/Wavelength\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\ntx_offset\n\n\nTX offset\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\ntx_grid_span\n\n\nTX grid spacing\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\nrx_freq_lmda\n\n\ncurrent RX frequency/Wavelength\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\nrx_offset\n\n\nRX offset\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\nrx_grid_span\n\n\nRX grid spacing\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\ntx_pwr\n\n\ncurrent TX power\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\nrx_pwr\n\n\ncurrent RX power\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\ntx_grid_span\n\n\nTX grid spacing\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\nbias_current\n\n\nTX Bias current\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\ntemperature\n\n\nTX laser temperature\n\n\nnumber\n\n\nonly valid for type OFPPSPT_OPTICAL\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexp_id\n\n\nid of the Experimenter\n\n\nhex\n\n\na 32-bit hex number, only valid for type OFPPSPT_EXPERIMENTER\n\n\n\n\n\n\n\n\n\n\nexp_type\n\n\nexperimenter defined type\n\n\nhex\n\n\na 32-bit hex number, only valid for type OFPPSPT_EXPERIMENTER\n\n\n\n\n\n\nexp_data\n\n\nexperiment data\n\n\nbytearray\n\n\nonly valid for type OFPPSPT_EXPERIMENTER\n\n\n\n\n\n\n\n\nOFPPSPT\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nethernet\n\n\nethernet property\n\n\n\n\n\n\noptical\n\n\noptical property\n\n\n\n\n\n\nexperimenter\n\n\nexperimenter property\n\n\n\n\n\n\n\n\nOFPOSF\n\n\n\n\n\n\n\n\nvalue\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nrx_tune\n\n\nreceiver tune info valid\n\n\n\n\n\n\ntx_tune\n\n\ntransmit tune info valid\n\n\n\n\n\n\ntx_pwr\n\n\nTX power is valid\n\n\n\n\n\n\nrx_pwr\n\n\nRX power is valid\n\n\n\n\n\n\ntx_bias\n\n\ntransmit bias is valid\n\n\n\n\n\n\ntx_temp\n\n\nTX temp is valid\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nmethod\n: \nofc.send.multipart.port_stats\n,\n        \nparams\n: {\n            \ndpid\n: \n0xaabb000102030405\n,\n            \nport_no\n: \n0xe0\n\n        }\n    }\n\n    \n--\n    {\n        \nid\n: 1,\n        \njsonrpc\n: \n2.0\n,\n        \nresult\n: [\n            {\n                \nport_no\n: \n0xe0\n,\n                \ntx_packets\n: 28290,\n                \nrx_packets\n: 29348,\n                \ntx_bytes\n: 7039684,\n                \nrx_bytes\n: 7200243,\n                \ntx_dropped\n: 609,\n                \nrx_dropped\n: 534,\n                \ntx_errors\n: 97,\n                \nrx_errors\n: 80,\n                \nduration_sec\n: 2,\n                \nduration_nsec\n: 56,\n                \nproperties\n: [\n                    {\n                        \ntype\n: \nOFPPSPT_ETHERNET\n,\n                        \nrx_frame_err\n: 8,\n                        \nrx_crc_err\n: 15,\n                        \nrx_over_err\n: 57,\n                        \ncollisions\n: 18\n                    }\n                ]\n            }\n        ]\n    }\n\n\n\n\n\n\n\nofc.send.multipart.port_description\n\n\nget a description of all the ports in the system that support OpenFlow\n\n\nParams\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\ndpid\n\n\nswitch datapath id\n\n\nhex\n\n\n64-bit hex number given as string\n\n\ntrue\n\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\n\n\n\n\n\n\n\n\nport_no\n\n\nport that this queue attaching to, should refer to a valid physical port\n\n\nhybrid\n\n\na 32-bit number between [0, 0xffffff00) or \"any\" for all ports\n\n\n\n\n\n\nhw_addr\n\n\nHardware address of the interface\n\n\nnumber\n\n\n\n\n\n\n\n\nname\n\n\nName of the interface\n\n\nnumber\n\n\n\n\n\n\n\n\nconfig\n\n\nBitmap of OFPPC_* flags\n\n\nnumber\n\n\n\n\n\n\n\n\nstate\n\n\nBitmap of OFPPS_* flags\n\n\nnumber\n\n\n\n\n\n\n\n\nproperties\n\n\nproperty list of port type specific statistics\n\n\narray\n\n\nconsists of ofp_port_desc_prop objects\n\n\n\n\n\n\n\n\nProperties of ofp_port_desc_prop object\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\nJSON type\n\n\nnote\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nport type\n\n\nenum\n\n\n\n\n\n\n\n\ncurr\n\n\nnumber of frame alignment errors\n\n\nnumber\n\n\n\n\n\n\n\n\nadvertised\n\n\nFeatures being advertised by the port\n\n\nnumber\n\n\n\n\n\n\n\n\nsupported\n\n\nFeatures supported by the port\n\n\nnumber\n\n\n\n\n\n\n\n\npeer\n\n\nFeatures advertised by peer\n\n\nnumber\n\n\n\n\n\n\n\n\ncurr_speed\n\n\nCurrent port bitrate in kbps\n\n\nnumber\n\n\n\n\n\n\n\n\nmax_speed\n\n\nMax port bitrate in kbps\n\n\nnumber\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    --\n\n   {\n     \njsonrpc\n: \n2.0\n,\n     \nmethod\n: \nofc.send.multipart.port_description\n,\n     \nparams\n: {\n        \ndpid\n: \n0x0000000000000001\n\n     },\n     \nid\n: 1\n   }\n\n    \n--\n   {\n  \njsonrpc\n: \n2.0\n,\n  \nresult\n: [\n    {\n      \nport_no\n: \n1\n,\n      \nhw_addr\n: \nea:68:7d:44:9:75\n,\n      \nname\n: \ns1-eth1\n,\n      \nconfig\n: [],\n      \nstate\n: [],\n      \nproperties\n: [\n        {\n          \ntype\n: \nETHERNET\n,\n          \ncurr\n: [],\n          \nadvertised\n: [],\n          \nsupported\n: [],\n          \npeer\n: [],\n          \ncurr_speed\n: 0,\n          \nmax_speed\n: 102400\n        }\n      ]\n    },\n    {\n      \nport_no\n: \n2\n,\n      \nhw_addr\n: \n22:9d:cb:f9:97:cd\n,\n      \nname\n: \ns1-eth2\n,\n      \nconfig\n: [],\n      \nstate\n: [],\n      \nproperties\n: [\n        {\n          \ntype\n: \nETHERNET\n,\n          \ncurr\n: [],\n          \nadvertised\n: [],\n          \nsupported\n: [],\n          \npeer\n: [],\n          \ncurr_speed\n: 0,\n          \nmax_speed\n: 102400\n        }\n      ]\n    }\n  ],\n  \nid\n: 1\n}", 
            "title": "API Documentation"
        }, 
        {
            "location": "/opensdncore-nb-api/#json-rpc-openflow", 
            "text": "", 
            "title": "JSON-RPC-OpenFlow"
        }, 
        {
            "location": "/opensdncore-nb-api/#notations", 
            "text": "In addition to the standard JSON data types, several special types are defined to improve the expressiveness of parameters in a RPC call. The following table shows the detail of each type.", 
            "title": "Notations"
        }, 
        {
            "location": "/opensdncore-nb-api/#hex", 
            "text": "a hex number given as a JSON string. The \"0x\" prefix is optional here.  Example           hex : 0xabcd1234", 
            "title": "hex"
        }, 
        {
            "location": "/opensdncore-nb-api/#hybrid", 
            "text": "could be either a hex or a string. Must be given as a JSON string.\n Example           hybrid : 0xabcd1234 \n         hybrid : max", 
            "title": "hybrid"
        }, 
        {
            "location": "/opensdncore-nb-api/#enum", 
            "text": "a JSON string whose value can just be in a limit range. The range will be defined in an array with each possible value and its meaning, and the name of the array will be given in upper case.\n Example           enum : in_port \n\n        where the range is given in\n         OFPP : [\n            {\n                 enum_value :  max ,\n                 enum_meaning :  max port the switch can support \n            },\n            {\n                 enum_value :  in_port ,\n                 enum_meaning :  send the packet out the inpurt port. This reserved port must be explicitly used in order to send back out of the input port \n            },\n            {\n                 enum_value :  table ,\n                 enum_meaning :  submit the packet to the first flow table. Can used only in packet out message \n            }\n            ...\n        ]", 
            "title": "enum"
        }, 
        {
            "location": "/opensdncore-nb-api/#bitmap", 
            "text": "a JSON array that consists of enum values\n Example           bitmap :[\n             port_down ,\n             no_fwd ,\n             no_packet_in \n        ]\n\n        where the range is given in\n         OFPPC : [\n            {\n                 enum_value :  port_down ,\n                 enum_meaning :  port is administratively down \n            },\n            {\n                 enum_value :  no_recv ,\n                 enum_meaning :  drop all packets received by port \n            },\n            {\n                 enum_value :  no_fwd ,\n                 enum_meaning :  drop packets forwarded to port \n            },\n            {\n                 enum_value :  no_packet_in ,\n                 enum_meaning :  do not send packet-in message for port  \n            }\n            ...\n        ]", 
            "title": "bitmap"
        }, 
        {
            "location": "/opensdncore-nb-api/#bytearray", 
            "text": "a JSON array that consists of decimal numbers, with each number between  0, 255 , or a hex byte string with the first byte being the first element of the array. Notice that by using hex representation, one byte consists of two hex digits.\n Example          The following two fields represent the same byte array:\n         bytearray :[1,2,3,4,5,6]\n         bytearray : 0x010203040506", 
            "title": "bytearray"
        }, 
        {
            "location": "/opensdncore-nb-api/#data-structures", 
            "text": "", 
            "title": "Data Structures"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofp_match", 
            "text": "an array consists of ofp_oxm objects  Example      [\n        {\n             match_class :  openflow_basic ,\n             field :  ipv4_src ,\n             mask :  255.255.255.0 ,\n             value :  192.168.1.1 \n        },\n        {\n             match_class :  openflow_basic ,\n             field :  tcp_src ,\n             value :  5566 \n        }\n    ]", 
            "title": "ofp_match"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofp_oxm", 
            "text": "ofp_oxm     name  description  JSON type  restriction      match_class  oxm matching class  enum  one of OFPXMC enumeration    field  match field  enum  one of OFPXMT_OFB enumeration    value  match value  string  Unless specified, this value should be given in conventional form according to its type(e.g. TCP/UDP/SCTP ports should be given in decimal but as string    mask  match mask  string  the same length as value     OFPXMC     value  description      nxm0  backward compatibility with NXM    nxm1  backward compatibility with NXM    openflow_basic  basic class for OpenFlow    experimenter  experimenter class     OFPXMT_OFB     value  description      in_port  switch input port    in_phy_port  switch physical input port    metadata  metadata passed between tables    eth_dst  ethernet destination address    eth_src  ethernet source address    eth_type  ethernet frame type    vlan_id  VLAN id    vlan_pcp  VLAN priority    ip_dscp  IP DSCP(6 bits in ToS field)    ip_ecn  IP ECN(2 bits in ToS field)    ip_proto  IP protocol    ipv4_src  IPv4 source address    ipv4_dst  IPv4 destination address    tcp_src  tcp source port    tcp_dst  tcp destination port    udp_src  udp source port    udp_dst  udp destination port    sctp_src  sctp source port    sctp_dst  sctp destination port    icmpv4_type  ICMP type    icmpv4_code  ICMP code    arp_op  ARP opcode    arp_spa  ARP source IPv4 address    arp_tpa  ARP target IPv4 address    arp_sha  ARP source hardware address    arp_tha  ARP target hardware address    ipv6_src  IPv6 source address    ipv6_dst  IPv6 destination address    ipv6_flabel  IPv6 flow label    icmpv6_type  ICMP type    icmpv6_code  ICMP code    ipv6_nd_target  target address for ND    ipv6_nd_sll  source link-layer for ND    ipv6_nd_tll  target link-layer for ND    mpls_label  MPLS lable    mpls_tc  MPLS TC    mpls_bos  MPLS BoS bit    pbb_isid  PBB I-SID    tunnel_id  logical port metadata    ipv6_exthdr  IPv6 extension header pseudo-field    pbb_uca  PBB UCA header fields     Example          {\n             match_class :  openflow_basic ,\n             field :  ipv4_src ,\n             mask :  255.255.255.0 ,\n             value :  192.168.1.1 \n        }", 
            "title": "ofp_oxm"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofp_instructions", 
            "text": "consists of several objects which represent different kinds of instructions.\nNotice that each instruction can appear only once in an instruction list.  goto_table     name  description  JSON type  restriction      table_id  set next table in the lookup pipeline  number  a number between [0, 255]     write_metadata     name  description  JSON type  restriction      metadata  metadata value to write  hex  a 64-bit hex number    metadata_mask  metadata write bitmask  hex  a 64-bit hex number     meter     name  description  JSON type  restriction      meter_id  meter instance  hybrid  a 32-bit hex number between [0,0xffff0000] or one of OFPM enumeration     experimenter     name  description  JSON type  restriction      exp_id  experimenter id  hex  a 32-bit hex number    exp_data  experimenter-defined additional data  bytearray  a byte array     apply_actions     name  description  JSON type  restriction      ofp_actions  actions to apply  object  the same form as ofp_actions object     write_actions     name  description  JSON type  restriction      ofp_actions  actions to write  object  the same form as ofp_actions object     clear_actions  null  OFPM     value  description      max  last usable meter    slowpath  meter for slow datapath    controller  meter for controller connection    all  represents all meters for stat requests commands     Example       ofp_instructions : {\n         write_actions : {\n             output : {\n                 port_no :  0x0f \n            }\n        },\n         meter :{\n             meter_id : 0x01020304 \n        }\n    }", 
            "title": "ofp_instructions"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofp_actions", 
            "text": "consists of several objects which represent different kinds of actions.\nNotice that each action can appear only once in an action list.  output     name  description  JSON type  restriction      port_no  output port  hybrid  a 32-bit number between [0, 0xffffff00] or one of OFPP enumeration    max_len  max length to send to controller  hybrid  a 16-bit hex number between [0, 0xffe5] or one of OFPCML enumeration     group     name  description  JSON type  restriction      group_id  group id  hybrid  a 32-bit hex number between [0, 0xffffff00] or one of OFPG enumeration     set_queue     name  description  JSON type  restriction      queue_id  queue id for the packet  hex  a 32-bit hex number     set_mpls_ttl     name  description  JSON type  restriction      mpls_ttl  the MPLS TTL to set  number  a number between [0, 255]     set_nw_ttl     name  description  JSON type  restriction      nw_ttl  the NW TTL to set  number  a number between [0, 255]     push_vlan     name  description  JSON type  restriction      ethertype  the Ethertype of the new tag  hex  a 16-bit hex number     push_pbb     name  description  JSON type  restriction      ethertype  the Ethertype of the new tag  hex  a 16-bit hex number     push_mpls     name  description  JSON type  restriction      ethertype  the Ethertype of the new tag  hex  a 16-bit hex number     pop_mpls     name  description  JSON type  restriction      ethertype  the Ethertype of the MPLS payload  hex  a 16-bit hex number     set_field     name  description  JSON type  restriction      ofp_oxm  the field to set described by a single oxm  object  a single object having the same form as ofp_oxm object     experimenter     name  description  JSON type  restriction      exp_id  experimenter id  hex  a 32-bit hex number    exp_data  experimenter-defined additional data  bytearray  a byte array     copy_ttl_out  null  copy_ttl_in  null  dec_mpls_ttl  null  dec_nw_ttl  null  pop_pbb  null  pop_vlan  null  OFPCML     value  description      max  maximun max_len value which can be used to request a specific byte length    no_buffer  indicates that no buffering should be applied and the whole packet is to be sent to the controller     OFPG     value  description      max  last usable group    all  represents all groups for group delete commands    any  wildcard group used only for flow stats requests. selects all flows regardless of group (including flows with no group)     Example                   ofp_instructions : {\n                     write_actions : [\n                        {\n                             set_field : {\n                                 ofp_oxm : {\n                                     match_class :  openflow_basic ,\n                                     field :  ipv4_src ,\n                                     value :  11.0.0.1 \n                                }\n                            }\n                        },\n                        {\n                             set_field : {\n                                 ofp_oxm : {\n                                     match_class :  openflow_basic ,\n                                     field :  ipv4_dst ,\n                                     value :  11.0.0.2 \n                                }\n                            }\n                        },\n                        {\n                             output : {\n                                 port_no :  0x02 \n                            }\n                        }\n                    ]\n                }", 
            "title": "ofp_actions"
        }, 
        {
            "location": "/opensdncore-nb-api/#switch-management", 
            "text": "", 
            "title": "Switch Management"
        }, 
        {
            "location": "/opensdncore-nb-api/#listchannels", 
            "text": "list datapath id of switches connecting to this controller\n  Params  null  Result  a JSON array consists of dpids(64-bit hex number given as string)  Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  list.channels ,\n         params : null\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : [\n             0xaabb000102030405 ,\n             0xccdd000102030405 ,\n             0x1234567890abcdef \n         ]\n    }", 
            "title": "list.channels"
        }, 
        {
            "location": "/opensdncore-nb-api/#controller-to-switch-messaging", 
            "text": "", 
            "title": "Controller-to-Switch Messaging"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendget_config", 
            "text": "get switch configuration  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true     Result  a JSON object containing switch configuration information     name  description  JSON type  restriction      flags  set of configuration flags  bitmap  possible values enumerated in OFPC_FRAG    miss_send_len  max bytes of packet that datapath should send to the controller.  hybrid  a 16-bit hex number between [0, 0xffe5] or one of OFPCML enumeration     Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.get_config ,\n         params : {\n             dpid :  0xaabb000102030405 \n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : {\n             flags : [\n                 normal ,\n                 reasm \n            ],\n             miss_send_len :  no_buffer \n        }\n    }  OFPCML     value  description      max  max byte length    no_buffer  indicates that no buffering should be applied and the whole packet is to be sent to the controller     OFPC_FRAG     value  description      normal  no special handling for fragments    drop  drop fragments    reasm  reassemble", 
            "title": "ofc.send.get_config"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendflow_mod", 
            "text": "send a flow_mod message  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true    ofp_flow_mod  the flow_mod message  object  the same as described in ofp_flow_mod object  true     Result     name  description  JSON type  restriction      msg_id  a unique ID identifying this request  hex  global unique to the controller     \"ofp_flow_mod\"::  a JSON object representing a flow_mod message     name  description  JSON type  note  required      table_id  table id to be modified  hybrid  a 8-bit hex number between [0, 0xfe] or \"all\" for all tables  true    command  command to apply  enum  one of OFPFC enumeration  true    idle_timeout  idle time before discarding (seconds)  number   false    hard_timeout  max time before discarding (seconds)  number   false    priority  priority level of flow entry  number   false    cookie  require matching entries to contain this cookie value  hex  a 64-bit hex number  false    cookie_mask  cookie mask  hex  a 64-bit hex number  false    buffer_id  buffered packet to apply to. Not meaningful for delete commands  hybrid  a 32-bit hex number or \"no_buffer\"  false    out_port  for delete commands, require matching entries to include this as an output port  hybrid  a 32-bit hex number as described in ofp_port object, or \"any\" which indicates no restriction  false    out_group  for delete commands, require matching entries to include this as an output group  hybrid  a 32-bit hex number, or \"any\" which indicates no restriction  false    flags  flow entry configuration flags  bitmap  possible values enumerated in OFPFF  false    importance  eviction precedence  number  a number between [0, 2^ 16 ]  false    ofp_match  matching rules  array  consists of ofp_oxm objects  false    ofp_instructions  instructions to apply when matched  object  the same as  object  false     OFPFF     value  description      send_flow_rem  send flow removed message when flow expires or is deleted    check_overlap  check for overlapping entries first    reset_counts  reset flow packet and byte counts    no_pkt_counts  don't keep track of packet count    no_byt_counts  don't keep track of byte count     OFPFC     value  description      add  new flow    modify  modify all matching flows    modify_strict  modify entry strictly matching wildcards and priority    delete  delete all matching flows    delete_strict  delete entry strictly matching wildcars and priority     Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.flow_mod ,\n         params : {\n             dpid :  0xaabb000102030405 ,\n             ofp_flow_mod : {\n                 command :  add ,\n                 flags : [\n                     reset_counts ,\n                     send_flow_rem \n                ],\n                 idle_timeout : 14,\n                 ofp_instructions : {\n                     apply_actions : {\n                         output : {\n                             port_no :  0x0f \n                        }\n                    }\n                },\n                 ofp_match : [\n                    {\n                         match_class :  openflow_basic ,\n                         field :  ipv4_src ,\n                         mask :  255.255.255.0 ,\n                         value :  192.168.1.1 \n                    }\n                ],\n                 priority : 18,\n                 table_id :  0x0f \n            }\n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : {\n             msg_id :  0x01020304 \n        }\n    }", 
            "title": "ofc.send.flow_mod"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendbarrier", 
            "text": "send barrier message, used to ensure message dependencies have been met or wants to receive notifications for completed operations.\nThe switch will continue to execute new commands only if all the messages before the barrier have been processed  Params     name  description  JSON type  note  required      \"dpid\"  switch datapath id  string  64-bit hex number given as string  true     Result  a JSON String. \"Barrier Reply\" on success.  Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.barrier ,\n         params : {\n             dpid :  0xaabb000102030405 \n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result :  Barrier Reply \n    }", 
            "title": "ofc.send.barrier"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendrole_request", 
            "text": "used to query or change the role of controller  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true    role  new role that the controller wants to assume  enum  one of OFPCR enumeration  true     Result     name  description  JSON type  restriction      role  new role that accepted by switch. if the request is no_change, then the original role will be returned  enum  one of OFPCR enumeration. This field exists only if the new role is accepted by switch.     OFPCR     value  description      nochange  don't change current role    equal  default role, full access    master  full access, at most one master    slave  read-only access     Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.role_request ,\n         params : {\n             dpid :  0xaabb000102030405 ,\n             role :  no_change \n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : {\n             role :  equal \n        }\n    }", 
            "title": "ofc.send.role_request"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendmultipartflow", 
            "text": "get statistic information about individual flow entries  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true    ofp_multipart_flow  a multipart_flow message  object  format described in  true     Result  a JSON object consists of ofp_flow_stats object, whose format is introduced below  Properties of \"ofp_multipart_flow\" object     name  description  JSON type  note  required      table_id  table id  hybrid  a 8-bit hex number between [0, 0xfe] or \"all\" for all tables  true    out_port  Require matching entries to include this as an output port.  hybrid  a 32-bit hex number as described in ofp_port object, or \"any\" which indicates no restriction  false    out_group  Require matching entries to include this as an output group  hybrid  a 32-bit hex number, or \"any\" which indicates no restriction  false    cookie  Require matching entries to contain this cookie value  hex  a 64-bit hex number  false    cookie_mask  Require matching entries to contain this cookie value  hex  a 64-bit hex number,mask used to restrict the cookie bits that must match.  false    ofp_match  matching rules  array  consists of ofp_oxm objects  false     Properties of \"ofp_flow_stats\" object     name  description  JSON type  note      table_id  table id the flow came from  hybrid  a 8-bit hex number between [0, 0xfe] or \"all\" for all tables    packet_count  number of packet in flow  number     byte_count  number of byte in flow  number     idle_timeout  idle time before discarding (seconds)  number     hard_timeout  max time before discarding (seconds)  number     duration_sec  time flow has been alive in seconds  number     duration_nsec  time flow has been alive in nanoseconds beyond duration_sec  number     priority  priority level of flow entry  number     flags  flow entry configuration flags  bitmap  possible values enumerated in OFPFF    cookie  require matching entries to contain this cookie value  hex  a 64-bit hex number    importance  eviction precedence  number  a number between [0, 2^ 16 ]    ofp_match  matching rules  array  consists of ofp_oxm objects    ofp_instructions  instructions to apply when matched  object  the same as ofp_instructions object     OFPFF     value  description      send_flow_rem  send flow removed message when flow expires or is deleted    check_overlap  check for overlapping entries first    reset_counts  reset flow packet and byte counts    no_pkt_counts  don't keep track of packet count    no_byt_counts  don't keep track of byte count     Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.multipart.flow ,\n         params : {\n             dpid :  0xaabb000102030405 ,\n             ofp_multipart_flow : {\n                 ofp_match : [\n                    {\n                         match_class :  openflow_basic ,\n                         field :  ipv4_src ,\n                         mask :  255.255.255.0 ,\n                         value :  192.168.1.1 \n                    }\n                ],\n                 table_id :  0x0f \n            }\n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : [\n            {\n                 table_id :  0xe0 ,\n                 packet_count : 29348,\n                 byte_count : 7039684,\n                 idle_timeout : 3,\n                 hard_timeout : 15,\n                 duration_sec : 10,\n                 duration_nsec : 56,\n                 priority : 19,\n                 importance : 28,\n                 cookie :  0x1234567890abcdef ,\n                 flags : [\n                     check_overlap ,\n                     send_flow_rem \n                ],\n                 ofp_match : [\n                    {\n                         match_class :  openflow_basic ,\n                         field :  ipv4_src ,\n                         mask :  255.255.255.0 ,\n                         value :  192.168.1.1 \n                    },\n                    {\n                         match_class :  openflow_basic ,\n                         field :  tcp_src ,\n                         value :  5566 \n                    }\n                ],\n                 ofp_instructions : {\n                     apply_actions : {\n                         output : {\n                             port_no :  0x0f \n                        }\n                    }\n                }\n            },\n            {\n                 table_id :  0xe0 ,\n                 packet_count : 29348,\n                 byte_count : 7039684,\n                 idle_timeout : 7,\n                 hard_timeout : 9,\n                 duration_sec : 2,\n                 duration_nsec : 99,\n                 priority : 37,\n                 importance : 89,\n                 cookie :  0x000000000000000f ,\n                 flags : [],\n                 ofp_match : [\n                    {\n                         match_class :  openflow_basic ,\n                         field :  ipv4_src ,\n                         mask :  255.255.255.0 ,\n                         value :  192.168.1.1 \n                    }\n                ],\n                 ofp_instructions : {\n                     goto_table : {\n                         table_id :  0x0f \n                    }\n                }\n            }\n        ]\n    }", 
            "title": "ofc.send.multipart.flow"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendmultipartport_stats", 
            "text": "get aggregate statistic information about ports  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true    port_no  port that this queue attaching to, should refer to a valid physical port  hybrid  a 32-bit number between [0, 0xffffff00) or \"all\" for all ports  true     Result     name  description  JSON type  note      port_no  port that this queue attaching to, should refer to a valid physical port  hybrid  a 32-bit number between [0, 0xffffff00) or \"any\" for all ports    tx_packets  number of transmitted packets  number     rx_packets  number of received packets  number     tx_bytes  number of transmitted bytes  number     rx_bytes  number of received bytes  number     tx_dropped  number of dropped packets  number     rx_dropped  number of dropped packets  number     tx_errors  Number of transmit errors.  number  a super-set of more specific transmit errors and should be greater than or equal to the sum of all tx_*_err values (none currently defined.)    rx_errors  Number of receive errors.  number  a super-set of more specific receive errors and should be greater than or equal to the sum of all rx_*_err values (none currently defined.)    duration_sec  time port has been alive in seconds  number     duration_nsec  time port has been alive in nanoseconds beyond duration_sec  number     properties  property list of port type specific statistics  array  consists of ofp_port_stats_prop objects     Properties of ofp_port_stats_prop object     name  description  JSON type  note      type  port type  enum  one of OFPPSPT enumeration    rx_frame_err  number of frame alignment errors  number  only valid for type OFPPSPT_ETHERNET    rx_crc_err  number of CRC errors  number  only valid for type OFPPSPT_ETHERNET    rx_over_err  number of packets with RX overrun  number  only valid for type OFPPSPT_ETHERNET    collisions  number of collisions  number  only valid for type OFPPSPT_ETHERNET        flags  features enabled by the port  bitmap  possible values enumerated in OFPOSF      tx_freq_lmda  current TX frequency/Wavelength  number  only valid for type OFPPSPT_OPTICAL    tx_offset  TX offset  number  only valid for type OFPPSPT_OPTICAL    tx_grid_span  TX grid spacing  number  only valid for type OFPPSPT_OPTICAL    rx_freq_lmda  current RX frequency/Wavelength  number  only valid for type OFPPSPT_OPTICAL    rx_offset  RX offset  number  only valid for type OFPPSPT_OPTICAL    rx_grid_span  RX grid spacing  number  only valid for type OFPPSPT_OPTICAL    tx_pwr  current TX power  number  only valid for type OFPPSPT_OPTICAL    rx_pwr  current RX power  number  only valid for type OFPPSPT_OPTICAL    tx_grid_span  TX grid spacing  number  only valid for type OFPPSPT_OPTICAL    bias_current  TX Bias current  number  only valid for type OFPPSPT_OPTICAL    temperature  TX laser temperature  number  only valid for type OFPPSPT_OPTICAL        exp_id  id of the Experimenter  hex  a 32-bit hex number, only valid for type OFPPSPT_EXPERIMENTER      exp_type  experimenter defined type  hex  a 32-bit hex number, only valid for type OFPPSPT_EXPERIMENTER    exp_data  experiment data  bytearray  only valid for type OFPPSPT_EXPERIMENTER     OFPPSPT     value  description      ethernet  ethernet property    optical  optical property    experimenter  experimenter property     OFPOSF     value  description      rx_tune  receiver tune info valid    tx_tune  transmit tune info valid    tx_pwr  TX power is valid    rx_pwr  RX power is valid    tx_bias  transmit bias is valid    tx_temp  TX temp is valid     Example      -- \n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         method :  ofc.send.multipart.port_stats ,\n         params : {\n             dpid :  0xaabb000102030405 ,\n             port_no :  0xe0 \n        }\n    }\n\n     --\n    {\n         id : 1,\n         jsonrpc :  2.0 ,\n         result : [\n            {\n                 port_no :  0xe0 ,\n                 tx_packets : 28290,\n                 rx_packets : 29348,\n                 tx_bytes : 7039684,\n                 rx_bytes : 7200243,\n                 tx_dropped : 609,\n                 rx_dropped : 534,\n                 tx_errors : 97,\n                 rx_errors : 80,\n                 duration_sec : 2,\n                 duration_nsec : 56,\n                 properties : [\n                    {\n                         type :  OFPPSPT_ETHERNET ,\n                         rx_frame_err : 8,\n                         rx_crc_err : 15,\n                         rx_over_err : 57,\n                         collisions : 18\n                    }\n                ]\n            }\n        ]\n    }", 
            "title": "ofc.send.multipart.port_stats"
        }, 
        {
            "location": "/opensdncore-nb-api/#ofcsendmultipartport_description", 
            "text": "get a description of all the ports in the system that support OpenFlow  Params     name  description  JSON type  note  required      dpid  switch datapath id  hex  64-bit hex number given as string  true     Result     name  description  JSON type  note      port_no  port that this queue attaching to, should refer to a valid physical port  hybrid  a 32-bit number between [0, 0xffffff00) or \"any\" for all ports    hw_addr  Hardware address of the interface  number     name  Name of the interface  number     config  Bitmap of OFPPC_* flags  number     state  Bitmap of OFPPS_* flags  number     properties  property list of port type specific statistics  array  consists of ofp_port_desc_prop objects     Properties of ofp_port_desc_prop object     name  description  JSON type  note      type  port type  enum     curr  number of frame alignment errors  number     advertised  Features being advertised by the port  number     supported  Features supported by the port  number     peer  Features advertised by peer  number     curr_speed  Current port bitrate in kbps  number     max_speed  Max port bitrate in kbps  number      Example      -- \n   {\n      jsonrpc :  2.0 ,\n      method :  ofc.send.multipart.port_description ,\n      params : {\n         dpid :  0x0000000000000001 \n     },\n      id : 1\n   }\n\n     --\n   {\n   jsonrpc :  2.0 ,\n   result : [\n    {\n       port_no :  1 ,\n       hw_addr :  ea:68:7d:44:9:75 ,\n       name :  s1-eth1 ,\n       config : [],\n       state : [],\n       properties : [\n        {\n           type :  ETHERNET ,\n           curr : [],\n           advertised : [],\n           supported : [],\n           peer : [],\n           curr_speed : 0,\n           max_speed : 102400\n        }\n      ]\n    },\n    {\n       port_no :  2 ,\n       hw_addr :  22:9d:cb:f9:97:cd ,\n       name :  s1-eth2 ,\n       config : [],\n       state : [],\n       properties : [\n        {\n           type :  ETHERNET ,\n           curr : [],\n           advertised : [],\n           supported : [],\n           peer : [],\n           curr_speed : 0,\n           max_speed : 102400\n        }\n      ]\n    }\n  ],\n   id : 1\n}", 
            "title": "ofc.send.multipart.port_description"
        }, 
        {
            "location": "/osdnc-examples/", 
            "text": "SoftFIRE OpenSDNcore examples\n\n\nFraunhofer FOKUS provides two datacenter as part of its testbed for the SoftFIRE Prpject. The testbed identified as \nfokus-dev\n will provide SDN features based on OpenSDNcore.\n\n\nSetting up the Experiment\n\n\n\n\nDefine the experiment to use the \nfokus-dev\n testbed to launch virtual machines.\n\n\nInclude the resource \nsdn-controller-opensdncore-fokus\n to enable access to the SDN features.\n\n\nafter the successfill deployment of the experiment the sdn-manager resurnes the details needed to access the OpenSDNcore API.\n\n{\n\n    \nresource_id\n:\n \nsdn-controller-opensdncore-fokus\n,\n\n    \nflow-table-range\n:\n \n[\n30\n,\n \n31\n,\n \n32\n],\n\n    \ntoken\n:\n \nsecret\n,\n\n    \nURI\n:\n \nhttp://172.20.30.5:8001/api\n\n\n}\n\n\n\n\nCopy the \ntoken\n value and navigate to the provided \nURI\n using a web browser. The website provides the needed information and an simple user interface to run JSON-RPC request against the OpenSDNcore \nNorthbound-API\n. Use the provided token value to identify your experiment when doing API requests.\n\n\n\n\nPort Mirroring example\n\n\nThe following example will utilize a custom flow entry to duplicate all network traffic directed at a Virtual Machine and forward it to the network interface of another Virtual Machine.\n\n\n\n\nafter all the instances are bootet up correctly use the \nofc.list.channels\n command to list all switches in the setup.\n\n\nin our case there is only one switch with dpid \"0x0000000000000001\" present\n\n{\n\n    \njsonrpc\n:\n \n2.0\n,\n\n    \nresult\n:\n \n[\n\n        \n0x0000000000000001\n\n    \n],\n\n    \nid\n:\n \n1\n\n\n}\n\n\n\n\nfind the port number to which the traffic should be mirrored to by using the \nofc.send.multipart.port_description\n function and searching for the MAC address of the target instance.\n\n\nuse the discovered \nport_no\n, \ndpid\n and the provate IP-address of the instance which traffic should be duplicted to construct a openflow definition that will duplicate each network-packet to the target port of the monitoring instance.\n\n\nadd the new flow via the following json-rpc query to the switch into one of the flow tables that are assigned to your experiment (ex. 30,31,32).\n\n\n\n\n{\n\n  \nid\n:\n2342\n,\n\n  \njsonrpc\n:\n2.0\n,\n\n  \nmethod\n:\nofc.send.flow_mod\n,\n\n  \nparams\n:{\n\n     \ndpid\n:\n0x0000000000000001\n,\n           \n/*\n \naddress\n \nof\n \nthe\n \ntarget\n \nswitch\n \n*/\n\n     \nofp_flow_mod\n:{\n\n        \ncommand\n:\nadd\n,\n\n        \nflags\n:[\n\n           \nreset_counts\n,\n\n           \nsend_flow_rem\n\n        \n],\n\n        \nidle_timeout\n:\n100\n,\n\n        \nofp_instructions\n:{\n\n           \napply_actions\n:{\n\n              \noutput\n:\n \n{\n\n                 \nport\n:\n \n0x05\n             \n/*\n \nport\n \nnumber\n \nof\n \nthe\n \nmirror\n \nport\n \n*/\n\n              \n}\n\n           \n},\n\n           \nwrite_actions\n:{\n\n              \noutput\n:\n \n{\n\n                 \nport\n:\n \n0x01\n             \n/*\n \nport\n \nnumber\n \nof\n \nthe\n \noriginal\n \ndestination\n \ninstance\n \n*/\n\n              \n}\n\n           \n}\n\n        \n},\n\n        \nofp_match\n:[\n\n           \n{\n\n             \nmatch_class\n:\n \nopenflow_basic\n,\n\n                \nfield\n:\n \nipv4_dst\n,\n\n                \nvalue\n:\n \n192.168.66.22\n    \n/*\n \nthe\n \nprivate\n \nip\n \naddress\n \nof\n \nthe\n \ntarget\n \nvirtual\n \nmachine\n \n*/\n\n           \n}\n\n        \n],\n\n        \npriority\n:\n400\n,\n\n        \ntable_id\n:\n0x1e\n                   \n/*\n \nflow_table\n \n30\n \nin\n \nhex\n \nnotation\n \n*/\n\n     \n}\n\n  \n}\n\n\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/osdnc-examples/#softfire-opensdncore-examples", 
            "text": "Fraunhofer FOKUS provides two datacenter as part of its testbed for the SoftFIRE Prpject. The testbed identified as  fokus-dev  will provide SDN features based on OpenSDNcore.", 
            "title": "SoftFIRE OpenSDNcore examples"
        }, 
        {
            "location": "/osdnc-examples/#setting-up-the-experiment", 
            "text": "Define the experiment to use the  fokus-dev  testbed to launch virtual machines.  Include the resource  sdn-controller-opensdncore-fokus  to enable access to the SDN features.  after the successfill deployment of the experiment the sdn-manager resurnes the details needed to access the OpenSDNcore API. { \n     resource_id :   sdn-controller-opensdncore-fokus , \n     flow-table-range :   [ 30 ,   31 ,   32 ], \n     token :   secret , \n     URI :   http://172.20.30.5:8001/api  }   Copy the  token  value and navigate to the provided  URI  using a web browser. The website provides the needed information and an simple user interface to run JSON-RPC request against the OpenSDNcore  Northbound-API . Use the provided token value to identify your experiment when doing API requests.", 
            "title": "Setting up the Experiment"
        }, 
        {
            "location": "/osdnc-examples/#port-mirroring-example", 
            "text": "The following example will utilize a custom flow entry to duplicate all network traffic directed at a Virtual Machine and forward it to the network interface of another Virtual Machine.   after all the instances are bootet up correctly use the  ofc.list.channels  command to list all switches in the setup.  in our case there is only one switch with dpid \"0x0000000000000001\" present { \n     jsonrpc :   2.0 , \n     result :   [ \n         0x0000000000000001 \n     ], \n     id :   1  }   find the port number to which the traffic should be mirrored to by using the  ofc.send.multipart.port_description  function and searching for the MAC address of the target instance.  use the discovered  port_no ,  dpid  and the provate IP-address of the instance which traffic should be duplicted to construct a openflow definition that will duplicate each network-packet to the target port of the monitoring instance.  add the new flow via the following json-rpc query to the switch into one of the flow tables that are assigned to your experiment (ex. 30,31,32).   { \n   id : 2342 , \n   jsonrpc : 2.0 , \n   method : ofc.send.flow_mod , \n   params :{ \n      dpid : 0x0000000000000001 ,             /*   address   of   the   target   switch   */ \n      ofp_flow_mod :{ \n         command : add , \n         flags :[ \n            reset_counts , \n            send_flow_rem \n         ], \n         idle_timeout : 100 , \n         ofp_instructions :{ \n            apply_actions :{ \n               output :   { \n                  port :   0x05               /*   port   number   of   the   mirror   port   */ \n               } \n            }, \n            write_actions :{ \n               output :   { \n                  port :   0x01               /*   port   number   of   the   original   destination   instance   */ \n               } \n            } \n         }, \n         ofp_match :[ \n            { \n              match_class :   openflow_basic , \n                 field :   ipv4_dst , \n                 value :   192.168.66.22      /*   the   private   ip   address   of   the   target   virtual   machine   */ \n            } \n         ], \n         priority : 400 , \n         table_id : 0x1e                     /*   flow_table   30   in   hex   notation   */ \n      } \n   }  }", 
            "title": "Port Mirroring example"
        }, 
        {
            "location": "/opendaylight/", 
            "text": "OpenDaylight\n\n\nIntroduction\n\n\nOpenDaylight is the most popular opensource SDN controller.\n\n\nODL employs a model-driven approach to describe the network, the functions to be performed on it and the resulting state or status achieved.\n\n\nBy sharing YANG data structures in a common data store and messaging infrastructure, OpenDaylight allows for fine-grained services to be created then combined together to solve more complex problems. In the ODL Model Driven Service Abstraction Layer (MD-SAL), any app or function can be bundled into a service that is then then loaded into the controller. Services can be configured and chained together in any number of ways to match fluctuating needs within the network.\n\n\nOpenstack integration\n\n\nOpenStack can use OpenDaylight as its network management provider through the Modular Layer 2 (ML2) and the networking-odl plug-in. Moreover, OpenStack can use OpenDaylight to manage L3 networking and floating IPs. OpenDaylight manages the network flows for the OpenStack's control and compute nodes via OpenFlow southbound plugin and OVSDB southbound plugin", 
            "title": "Introduction"
        }, 
        {
            "location": "/opendaylight/#opendaylight", 
            "text": "", 
            "title": "OpenDaylight"
        }, 
        {
            "location": "/opendaylight/#introduction", 
            "text": "OpenDaylight is the most popular opensource SDN controller.  ODL employs a model-driven approach to describe the network, the functions to be performed on it and the resulting state or status achieved.  By sharing YANG data structures in a common data store and messaging infrastructure, OpenDaylight allows for fine-grained services to be created then combined together to solve more complex problems. In the ODL Model Driven Service Abstraction Layer (MD-SAL), any app or function can be bundled into a service that is then then loaded into the controller. Services can be configured and chained together in any number of ways to match fluctuating needs within the network.", 
            "title": "Introduction"
        }, 
        {
            "location": "/opendaylight/#openstack-integration", 
            "text": "OpenStack can use OpenDaylight as its network management provider through the Modular Layer 2 (ML2) and the networking-odl plug-in. Moreover, OpenStack can use OpenDaylight to manage L3 networking and floating IPs. OpenDaylight manages the network flows for the OpenStack's control and compute nodes via OpenFlow southbound plugin and OVSDB southbound plugin", 
            "title": "Openstack integration"
        }, 
        {
            "location": "/opendaylight-openflow-api/", 
            "text": "OpenDaylight API\n\n\nIntroduction\n\n\nThe testbeds which integrate OpenDaylight controller provide to the experimenter the access to MD-SAL Restconf API for OpenFlow Plugin. [1]\n\n\nUsage\n\n\nAs described in \nSDN Manager documentation\n, after successful instantiation of the resources, the experimenter receives the URI of the proxied OpenDaylight controller, a token and the list of tables assigned to him.\n\n\nWhen the experiment starts, for every OpenFlow node, all the flows of table 0 are redirected to the first table assigned to the user and then go to table 17.\n\n\n\n\nThen, the experimenter can make JSON Restconf requests to the proxied SDN controller. Every request must contain in the header the token received, and the experimenter can create/edit/delete flows only in the tables assigned to him.\n\n\nThe created flows can forward packets only to other experimenter owned tables or to the table 17.\n\n\nAs action, in the attribute \n\"output-node-connector\"\n are \nallowed\n only the values \n\"TABLE\"\n and \n\"IN_PORT\"\n, or a \nport_id\n\nThe values \n\"ALL\"\n, \n\"CONTROLLER\"\n, \n\"ANY\"\n, \n\"LOCAL\"\n, \n\"NORMAL\"\n, \n\"FLOOD\"\n are \nnot allowed\n.\n\n\nFor further information about these values, you can read the \nofficial Openflow documentation\n\n\nAll the requests that not satisfy the above requirements, will be rejected with an http status code = 403\n\n\n\n\nNote\n\n\nYou can call Restconf services as described in the \nOpenDaylight official documentation\n, but you can't use xml format and have to add the header \n'API-Token'\n. No Basic Authentication header is needed.\n\n\n\n\nHere below some examples of Restconf requests:\n\n\nREST get nodes example:\n\n\n\n\nHeaders:\n\n\nContent-type: application/json\n\n\nAccept: application/json\n\n\nAPI-Token: \n\n\n\n\n\n\nURL:\n    http://[HSOTNAME]:[PORT]/restconf/config/opendaylight-inventory:nodes/\n\n\nMethod: GET\n\n\n\n\nRequest body: EMPTY\n\n\n\n\n\n\nResponse body:\n\n    \n{\n\n        \nnodes\n:\n \n{\n\n            \nnode\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \nopenflow:257478269489732\n,\n\n                    \nnode-connector\n:\n \n[\n\n                        \n{\n\n                            \nid\n:\n \nopenflow:257478269489732:4\n,\n\n                            \n...\n\n                            \nflow-node-inventory:name\n:\n \ntapfa76a4ad-58\n,\n\n                            \nflow-node-inventory:configuration\n:\n \nPORT-UP\n,\n\n                            \naddress-tracker:addresses\n:\n \n[\n\n                                \n{\n\n                                    \nid\n:\n \n0\n,\n\n                                    \nip\n:\n \n10.0.0.10\n,\n\n                                    \nmac\n:\n \nfa:16:3e:a9:9e:39\n,\n\n                                    \nfirst-seen\n:\n \n1497436298506\n,\n\n                                    \nlast-seen\n:\n \n1497436298506\n\n                                \n}\n\n                            \n]\n\n                        \n},\n\n                        \n{\n\n                            \nid\n:\n \nopenflow:257478269489732:2\n,\n\n                            \nflow-node-inventory:name\n:\n \ntap40c62f4c-f7\n,\n\n                            \nflow-node-inventory:configuration\n:\n \nPORT-DOWN\n,\n\n                            \naddress-tracker:addresses\n:\n \n[\n\n                                \n{\n\n                                    \nid\n:\n \n2\n,\n\n                                    \nip\n:\n \n10.0.0.2\n,\n\n                                    \nmac\n:\n \nfa:16:3e:0d:c6:40\n,\n\n                                    \nfirst-seen\n:\n \n1497436298793\n,\n\n                                    \nlast-seen\n:\n \n1497448932221\n\n                                \n}\n\n                            \n]\n\n                        \n},\n\n                        \n{\n\n                            \nid\n:\n \nopenflow:257478269489732:1\n,\n\n                            \n...\n\n                            \nflow-node-inventory:name\n:\n \ntapd0bff1a4-2d\n,\n\n                            \nflow-node-inventory:configuration\n:\n \nPORT-DOWN\n,\n\n                            \naddress-tracker:addresses\n:\n \n[\n\n                                \n{\n\n                                    \nid\n:\n \n1\n,\n\n                                    \nip\n:\n \n10.0.0.2\n,\n\n                                    \nmac\n:\n \nfa:16:3e:60:fd:aa\n,\n\n                                    \nfirst-seen\n:\n \n1497436298646\n,\n\n                                    \nlast-seen\n:\n \n1497448932220\n\n                                \n}\n\n                            \n]\n\n                        \n},\n\n                        \n{\n\n                            \nid\n:\n \nopenflow:257478269489732:7\n,\n\n                            \n...\n\n                            \nflow-node-inventory:name\n:\n \ntap62ce8677-d8\n,\n\n                            \naddress-tracker:addresses\n:\n \n[\n\n                                \n{\n\n                                    \nid\n:\n \n3\n,\n\n                                    \nip\n:\n \n10.0.0.3\n,\n\n                                    \nmac\n:\n \nfa:16:3e:93:ff:b6\n,\n\n                                    \nfirst-seen\n:\n \n1497448932261\n,\n\n                                    \nlast-seen\n:\n \n1497448932261\n\n                                \n}\n\n                            \n]\n\n                        \n}\n\n                        \n...\n\n                    \n]\n\n                \n}\n\n            \n]\n\n        \n}\n\n    \n}\n\n\n\n\n\n\n\n\nREST put flow example - drop all packets with destination ip equals to 10.0.10.2/24:\n\n\n\n\nHeaders:\n\n\nContent-type: application/json\n\n\nAccept: application/json\n\n\nAPI-Token: \n\n\n\n\n\n\nURL:\n    http://[HSOTNAME]:[PORT]/restconf/config/opendaylight-inventory:nodes/node/openflow:72664714402125/table/2/flow/1\n\n\nMethod: PUT\n\n\nRequest body:\n\n\n\n\n    \n{\n\n      \nflow-node-inventory:flow\n:\n \n[\n\n        \n{\n\n          \nid\n:\n \n1\n,\n\n          \nflow-name\n:\n \nFoo\n,\n\n          \nmatch\n:\n \n{\n\n            \nipv4-destination\n:\n \n10.0.10.2/24\n,\n\n            \nethernet-match\n:\n \n{\n\n              \nethernet-type\n:\n \n{\n\n                \ntype\n:\n \n2048\n\n              \n}\n\n            \n}\n\n          \n},\n\n          \npriority\n:\n \n2\n,\n\n          \ntable_id\n:\n \n2\n,\n\n          \ninstructions\n:\n \n{\n\n            \ninstruction\n:\n \n[\n\n              \n{\n\n                \norder\n:\n \n0\n,\n\n                \napply-actions\n:\n \n{\n\n                  \naction\n:\n \n[\n\n                    \n{\n\n                      \norder\n:\n \n0\n,\n\n                      \ndrop-action\n:\n \n{}\n\n                    \n}\n\n                  \n]\n\n                \n}\n\n              \n}\n\n            \n]\n\n          \n}\n\n        \n}\n\n      \n]\n\n    \n}\n\n\n\n\n\nExamples\n\n\nThe official OpenDaylight OpenFlow Plugin documentation can be found \nhere\n\n\nExamples for XML for various flow matches, instructions \n actions can be found \nhere\n, but remember, the SoftFIRE OpenDaylight controller accepts only JSON requests\n\n\nReferences\n\n\n[1]: \nhttps://wiki.opendaylight.org/view/OpenDaylight_Controller:MD-SAL:Restconf\n OpenDaylight MD-SAL Documentation", 
            "title": "API Documentation"
        }, 
        {
            "location": "/opendaylight-openflow-api/#opendaylight-api", 
            "text": "", 
            "title": "OpenDaylight API"
        }, 
        {
            "location": "/opendaylight-openflow-api/#introduction", 
            "text": "The testbeds which integrate OpenDaylight controller provide to the experimenter the access to MD-SAL Restconf API for OpenFlow Plugin. [1]", 
            "title": "Introduction"
        }, 
        {
            "location": "/opendaylight-openflow-api/#usage", 
            "text": "As described in  SDN Manager documentation , after successful instantiation of the resources, the experimenter receives the URI of the proxied OpenDaylight controller, a token and the list of tables assigned to him.  When the experiment starts, for every OpenFlow node, all the flows of table 0 are redirected to the first table assigned to the user and then go to table 17.   Then, the experimenter can make JSON Restconf requests to the proxied SDN controller. Every request must contain in the header the token received, and the experimenter can create/edit/delete flows only in the tables assigned to him.  The created flows can forward packets only to other experimenter owned tables or to the table 17.  As action, in the attribute  \"output-node-connector\"  are  allowed  only the values  \"TABLE\"  and  \"IN_PORT\" , or a  port_id \nThe values  \"ALL\" ,  \"CONTROLLER\" ,  \"ANY\" ,  \"LOCAL\" ,  \"NORMAL\" ,  \"FLOOD\"  are  not allowed .  For further information about these values, you can read the  official Openflow documentation  All the requests that not satisfy the above requirements, will be rejected with an http status code = 403   Note  You can call Restconf services as described in the  OpenDaylight official documentation , but you can't use xml format and have to add the header  'API-Token' . No Basic Authentication header is needed.   Here below some examples of Restconf requests:", 
            "title": "Usage"
        }, 
        {
            "location": "/opendaylight-openflow-api/#rest-get-nodes-example", 
            "text": "Headers:  Content-type: application/json  Accept: application/json  API-Token:     URL:\n    http://[HSOTNAME]:[PORT]/restconf/config/opendaylight-inventory:nodes/  Method: GET   Request body: EMPTY    Response body:      { \n         nodes :   { \n             node :   [ \n                 { \n                     id :   openflow:257478269489732 , \n                     node-connector :   [ \n                         { \n                             id :   openflow:257478269489732:4 , \n                             ... \n                             flow-node-inventory:name :   tapfa76a4ad-58 , \n                             flow-node-inventory:configuration :   PORT-UP , \n                             address-tracker:addresses :   [ \n                                 { \n                                     id :   0 , \n                                     ip :   10.0.0.10 , \n                                     mac :   fa:16:3e:a9:9e:39 , \n                                     first-seen :   1497436298506 , \n                                     last-seen :   1497436298506 \n                                 } \n                             ] \n                         }, \n                         { \n                             id :   openflow:257478269489732:2 , \n                             flow-node-inventory:name :   tap40c62f4c-f7 , \n                             flow-node-inventory:configuration :   PORT-DOWN , \n                             address-tracker:addresses :   [ \n                                 { \n                                     id :   2 , \n                                     ip :   10.0.0.2 , \n                                     mac :   fa:16:3e:0d:c6:40 , \n                                     first-seen :   1497436298793 , \n                                     last-seen :   1497448932221 \n                                 } \n                             ] \n                         }, \n                         { \n                             id :   openflow:257478269489732:1 , \n                             ... \n                             flow-node-inventory:name :   tapd0bff1a4-2d , \n                             flow-node-inventory:configuration :   PORT-DOWN , \n                             address-tracker:addresses :   [ \n                                 { \n                                     id :   1 , \n                                     ip :   10.0.0.2 , \n                                     mac :   fa:16:3e:60:fd:aa , \n                                     first-seen :   1497436298646 , \n                                     last-seen :   1497448932220 \n                                 } \n                             ] \n                         }, \n                         { \n                             id :   openflow:257478269489732:7 , \n                             ... \n                             flow-node-inventory:name :   tap62ce8677-d8 , \n                             address-tracker:addresses :   [ \n                                 { \n                                     id :   3 , \n                                     ip :   10.0.0.3 , \n                                     mac :   fa:16:3e:93:ff:b6 , \n                                     first-seen :   1497448932261 , \n                                     last-seen :   1497448932261 \n                                 } \n                             ] \n                         } \n                         ... \n                     ] \n                 } \n             ] \n         } \n     }", 
            "title": "REST get nodes example:"
        }, 
        {
            "location": "/opendaylight-openflow-api/#rest-put-flow-example-drop-all-packets-with-destination-ip-equals-to-10010224", 
            "text": "Headers:  Content-type: application/json  Accept: application/json  API-Token:     URL:\n    http://[HSOTNAME]:[PORT]/restconf/config/opendaylight-inventory:nodes/node/openflow:72664714402125/table/2/flow/1  Method: PUT  Request body:        { \n       flow-node-inventory:flow :   [ \n         { \n           id :   1 , \n           flow-name :   Foo , \n           match :   { \n             ipv4-destination :   10.0.10.2/24 , \n             ethernet-match :   { \n               ethernet-type :   { \n                 type :   2048 \n               } \n             } \n           }, \n           priority :   2 , \n           table_id :   2 , \n           instructions :   { \n             instruction :   [ \n               { \n                 order :   0 , \n                 apply-actions :   { \n                   action :   [ \n                     { \n                       order :   0 , \n                       drop-action :   {} \n                     } \n                   ] \n                 } \n               } \n             ] \n           } \n         } \n       ] \n     }", 
            "title": "REST put flow example - drop all packets with destination ip equals to 10.0.10.2/24:"
        }, 
        {
            "location": "/opendaylight-openflow-api/#examples", 
            "text": "The official OpenDaylight OpenFlow Plugin documentation can be found  here  Examples for XML for various flow matches, instructions   actions can be found  here , but remember, the SoftFIRE OpenDaylight controller accepts only JSON requests", 
            "title": "Examples"
        }, 
        {
            "location": "/opendaylight-openflow-api/#references", 
            "text": "[1]:  https://wiki.opendaylight.org/view/OpenDaylight_Controller:MD-SAL:Restconf  OpenDaylight MD-SAL Documentation", 
            "title": "References"
        }, 
        {
            "location": "/pd-manager/", 
            "text": "Physical Device Manager\n\n\nThe Physical Device Manager only provides (for the second wave) reservation of physical resources. For that reason the only thing to be specified is the \nresource_id\n, that can be checked in the resource discovery phase. Please read carefully the description for avoiding misunderstanding. Anyway a definition of the NodeType follows:\n\n\nPhysicalResource\n:\n\n  \nderived_from\n:\n \neu.softfire.BaseResource\n\n  \ndescription\n:\n \nDefines\n \na\n \nPhysical\n \nresource\n \nrequest\n \nin\n \nthe\n \nSoftFIRE\n \nMiddleware\n\n  \nproperties\n:\n\n    \nstart-date\n:\n \n2017-08-01\n\n    \nstart-date\n:\n \n2017-08-10\n\n\n\n\n\n\n\nNote\n\n\nRegarding the PhysicalResource, it is recommended to specify start and end date since it is not possible to reserve a physical resource for a long period and for that reason the whole experiment could be rejected", 
            "title": "Physical Device Manager"
        }, 
        {
            "location": "/pd-manager/#physical-device-manager", 
            "text": "The Physical Device Manager only provides (for the second wave) reservation of physical resources. For that reason the only thing to be specified is the  resource_id , that can be checked in the resource discovery phase. Please read carefully the description for avoiding misunderstanding. Anyway a definition of the NodeType follows:  PhysicalResource : \n   derived_from :   eu.softfire.BaseResource \n   description :   Defines   a   Physical   resource   request   in   the   SoftFIRE   Middleware \n   properties : \n     start-date :   2017-08-01 \n     start-date :   2017-08-10    Note  Regarding the PhysicalResource, it is recommended to specify start and end date since it is not possible to reserve a physical resource for a long period and for that reason the whole experiment could be rejected", 
            "title": "Physical Device Manager"
        }, 
        {
            "location": "/security-manager/", 
            "text": "Security Manager\n\n\nThe Security Manager inside the SoftFIRE Middleware makes available to the Experimenter a \nseries of security related functionalities that she might decide to include and use within her \nactivities on the SoftFIRE platform. \nHere is the list of the available features. \n1. The Experimenter can deploy a Security Resource \n2. The Experimenter can statically configure her Security Resource by means of its descriptor\n\n\n\n\nThe Experimenter can enable logs collection from her Resource \n\n\n\n\nThe Experimenter can statically configure some rules on her Resource \n\n\n\n\n\n\nThe Experimenter can dynamically configure her Resource once it has been deployed \n\n\n\n\nThe Experimenter can see her Resources logs in a web dashboard \n\n\nThe Experimenter can perform searches among her Resources logs in a web dashboard \n\n\nThe Experimenter can see statistics related to her Resources logs in a web dashboard  \n\n\n\n\nSecurity Resources\n\n\nA Security Resource is a commonly used security agent that the Experimenter can include in her \nexperiment. She can access and configure it through a static initial configuration, included in the \nTOSCA description of the Resource, or, once deployed, through a REST interface that exposes its \nmain services. \nThe Experimenter can also ask the Security Resource to send its log messages to a remote log \ncollector, which makes them available in a simple web page reserved to her. The Experimenter \ncould easily access it through its web browser and check the behaviour of her all security agents, \nand to see some statistics. \nThe Experimenter can get the Security Resource in two different formats: \n\n\n\n\n\n\nAs an agent directly installed in the VM that she wants to monitor. The system will \nprovide her a script that the Experimenter has just to run inside the VM. It will be already \nconfigured as required in the TOSCA description of the resource. The output of the script \nwill provide to the Experimenter information on how to access the deployed resource \n(URLs, etc.) \n\n\n\n\n\n\nAs a standalone VM the Security Resource will be deployed directly by the Security \nManager in the testbed chosen by the Experimenter. The Security Manager will take \ncare of the initial configuration of the resource. \nThe Experimenter has to set up on her own the redirection of the network traffic that he wants \nto control through the Security Resource VM (by means of tunnelling or SDN capabilities).  \n\n\n\n\n\n\nToday, the only Security Resource available on the SoftFIRE environment is the \nfirewall\n.  \n\n\nSecurity Resource definition\n\n\nSecurityResource\n:\n\n    \nderived_from\n:\n \neu.softfire.BaseResource\n\n    \ndescription\n:\n \nDefines\n \na\n \nSecurity\n \nagent\n \nto\n \nbe\n \ndeployed.\n \nMore\n \ndetails\n \non\n \n[docu_url]\n\n    \nproperties\n:\n\n        \nresource_id\n:\n\n            \ntype\n:\n \nstring\n\n            \nrequired\n:\n \ntrue\n\n        \ntestbed\n:\n\n            \ntype\n:\n \nstring\n\n            \nrequired\n:\n \nfalse\n\n        \nwant_agent\n:\n\n            \ntype\n:\n \nboolean\n\n            \nrequired\n:\n \ntrue\n\n        \nlan_name\n:\n \n            \ntype\n:\n \nstring\n\n            \nrequired\n:\n \nfalse\n\n        \nlogging\n:\n\n            \ntype\n:\n \nboolean\n\n            \nrequired\n:\n \ntrue\n\n        \nallowed_ips\n:\n\n            \ntype\n:\n \nlist\n\n            \nentry_schema\n:\n\n                \ntype\n:\n \nstring\n\n            \nrequired\n:\n \nfalse\n\n        \ndenied_ips\n:\n\n            \ntype\n:\n \nlist\n\n            \nentry_schema\n:\n\n                \ntype\n:\n \nstring\n\n            \nrequired\n:\n \nfalse\n\n        \ndefault_rule\n:\n\n            \ntype\n:\n \nstring\n\n            \nrequired\n:\n \ntrue\n\n\n\n\n\nThis node type has different properties:\n\n\n\n\nresource_id\n: Defines the type of the Security Resource. To date only \nfirewall\n is accepted\n\n\ntestbed\n: Defines where to deploy the Security Resource selected. It is ignored if want_agent is True\n\n\nwant_agent\n: Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor\n\n\nlan_name\n: Select the network on which the VM is deployed (if \nwant_agent\n is False). If no value is entered, \nsoftfire-internal\n is chosen\n\n\nlogging\n: Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard\n\n\nallowed_ips\n: List of IPs (or CIDR  masks) allowed by the firewall. [allow from \nIP\n]\n\n\ndenied_ips\n: List of IPs (or CIDR masks) denied by the firewall [deny from \nIP\n]\n\n\ndefault_rule\n: Default rule applied by the firewall (allow/deny)\n\n\n\n\nTestbed Names\n\n\n\n\n\n\n\n\nAlias\n\n\nTestbed\n\n\n\n\n\n\n\n\n\n\nfokus\n\n\nFOKUS testbed, Berlin\n\n\n\n\n\n\nericsson\n\n\nERICSSON testbed, Rome\n\n\n\n\n\n\nsurrey\n\n\nSURREY testbed, Surrey\n\n\n\n\n\n\nads\n\n\nADS testbed, Rome\n\n\n\n\n\n\ndt\n\n\nDeutsche Telekom testbed, Berlin\n\n\n\n\n\n\n\n\nTechnical details\n\n\nThis sequence diagram specifies the operations performed by the Security Manager based on the inputs received by the Experimenter.", 
            "title": "General"
        }, 
        {
            "location": "/security-manager/#security-manager", 
            "text": "The Security Manager inside the SoftFIRE Middleware makes available to the Experimenter a \nseries of security related functionalities that she might decide to include and use within her \nactivities on the SoftFIRE platform. \nHere is the list of the available features. \n1. The Experimenter can deploy a Security Resource \n2. The Experimenter can statically configure her Security Resource by means of its descriptor   The Experimenter can enable logs collection from her Resource    The Experimenter can statically configure some rules on her Resource     The Experimenter can dynamically configure her Resource once it has been deployed    The Experimenter can see her Resources logs in a web dashboard   The Experimenter can perform searches among her Resources logs in a web dashboard   The Experimenter can see statistics related to her Resources logs in a web dashboard", 
            "title": "Security Manager"
        }, 
        {
            "location": "/security-manager/#security-resources", 
            "text": "A Security Resource is a commonly used security agent that the Experimenter can include in her \nexperiment. She can access and configure it through a static initial configuration, included in the \nTOSCA description of the Resource, or, once deployed, through a REST interface that exposes its \nmain services. \nThe Experimenter can also ask the Security Resource to send its log messages to a remote log \ncollector, which makes them available in a simple web page reserved to her. The Experimenter \ncould easily access it through its web browser and check the behaviour of her all security agents, \nand to see some statistics. \nThe Experimenter can get the Security Resource in two different formats:     As an agent directly installed in the VM that she wants to monitor. The system will \nprovide her a script that the Experimenter has just to run inside the VM. It will be already \nconfigured as required in the TOSCA description of the resource. The output of the script \nwill provide to the Experimenter information on how to access the deployed resource \n(URLs, etc.)     As a standalone VM the Security Resource will be deployed directly by the Security \nManager in the testbed chosen by the Experimenter. The Security Manager will take \ncare of the initial configuration of the resource. \nThe Experimenter has to set up on her own the redirection of the network traffic that he wants \nto control through the Security Resource VM (by means of tunnelling or SDN capabilities).      Today, the only Security Resource available on the SoftFIRE environment is the  firewall .", 
            "title": "Security Resources"
        }, 
        {
            "location": "/security-manager/#security-resource-definition", 
            "text": "SecurityResource : \n     derived_from :   eu.softfire.BaseResource \n     description :   Defines   a   Security   agent   to   be   deployed.   More   details   on   [docu_url] \n     properties : \n         resource_id : \n             type :   string \n             required :   true \n         testbed : \n             type :   string \n             required :   false \n         want_agent : \n             type :   boolean \n             required :   true \n         lan_name :  \n             type :   string \n             required :   false \n         logging : \n             type :   boolean \n             required :   true \n         allowed_ips : \n             type :   list \n             entry_schema : \n                 type :   string \n             required :   false \n         denied_ips : \n             type :   list \n             entry_schema : \n                 type :   string \n             required :   false \n         default_rule : \n             type :   string \n             required :   true   This node type has different properties:   resource_id : Defines the type of the Security Resource. To date only  firewall  is accepted  testbed : Defines where to deploy the Security Resource selected. It is ignored if want_agent is True  want_agent : Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor  lan_name : Select the network on which the VM is deployed (if  want_agent  is False). If no value is entered,  softfire-internal  is chosen  logging : Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard  allowed_ips : List of IPs (or CIDR  masks) allowed by the firewall. [allow from  IP ]  denied_ips : List of IPs (or CIDR masks) denied by the firewall [deny from  IP ]  default_rule : Default rule applied by the firewall (allow/deny)", 
            "title": "Security Resource definition"
        }, 
        {
            "location": "/security-manager/#testbed-names", 
            "text": "Alias  Testbed      fokus  FOKUS testbed, Berlin    ericsson  ERICSSON testbed, Rome    surrey  SURREY testbed, Surrey    ads  ADS testbed, Rome    dt  Deutsche Telekom testbed, Berlin", 
            "title": "Testbed Names"
        }, 
        {
            "location": "/security-manager/#technical-details", 
            "text": "This sequence diagram specifies the operations performed by the Security Manager based on the inputs received by the Experimenter.", 
            "title": "Technical details"
        }, 
        {
            "location": "/firewall/", 
            "text": "Firewall SecurityResource\n\n\nA firewall is a network security system that monitors and controls the incoming and outgoing\nnetwork traffic based on predetermined rules.\nThe available firewall resource is built upon Ubuntu UFW (Uncomplicated FireWall), to which a\ncontrol system, based on a ReST interface, has been added.\n\nThe firewall agent is available for Ubuntu OS only.\n\nThe rules that can be defined on this type of firewall are stateless (they do not maintain\ninformation about the context). It works as a packet filter, which looks at network addresses,\nports and protocols.  \n\n\nServices specifically available for the firewall Resource are:\n\n\n\n\nThe Experimenter can statically define a list of allowed IP addresses (or CIDR masks)\n\n\nThe Experimenter can statically define a list of denied IP addresses (or CIDR masks)\n\n\nThe Experimenter can statically define the default behaviour of the firewall  \n\n\nThe Experimenter can get the status of the firewall\n\n\nThe Experimenter can get the rules installed on the firewall\n\n\nThe Experimenter can dynamically add a rule to the firewall\n\n\nThe Experimenter can dynamically update a rule on the firewall\n\n\nThe Experimenter can dynamically remove a rule from the firewall\n\n\n\n\nHere\n you can find the API definition to configure the firewall.", 
            "title": "Firewall"
        }, 
        {
            "location": "/firewall/#firewall-securityresource", 
            "text": "A firewall is a network security system that monitors and controls the incoming and outgoing\nnetwork traffic based on predetermined rules.\nThe available firewall resource is built upon Ubuntu UFW (Uncomplicated FireWall), to which a\ncontrol system, based on a ReST interface, has been added. \nThe firewall agent is available for Ubuntu OS only. \nThe rules that can be defined on this type of firewall are stateless (they do not maintain\ninformation about the context). It works as a packet filter, which looks at network addresses,\nports and protocols.    Services specifically available for the firewall Resource are:   The Experimenter can statically define a list of allowed IP addresses (or CIDR masks)  The Experimenter can statically define a list of denied IP addresses (or CIDR masks)  The Experimenter can statically define the default behaviour of the firewall    The Experimenter can get the status of the firewall  The Experimenter can get the rules installed on the firewall  The Experimenter can dynamically add a rule to the firewall  The Experimenter can dynamically update a rule on the firewall  The Experimenter can dynamically remove a rule from the firewall   Here  you can find the API definition to configure the firewall.", 
            "title": "Firewall SecurityResource"
        }, 
        {
            "location": "/monitoring-manager/", 
            "text": "Monitoring Manager\n\n\nThe Monitoring Manager provides proper resources to experimenters requiring monitoring service.\nFor experimenters requiring monitoring services, the Monitoring Manager provides, via OpenBaton, the\ninstallation of an additional Virtual Machine pre-configured with Zabbix\nServer.\nAll Virtual Machines requested by the experimenter will be installed with Zabbix Agent, per-configured to\ncommunicate with experimenter\u2019s Zabbix Server.\nThe experimenters receive full administrations rights of Zabbix Server, in order to be able to configure the\nserver according the specific needs of the experimenter.\n\n\nMonitoring resource\n\n\nThe MonitoringResource node type is defined as follows, as per\u00a0node types page: \nnode_types\n:\n\n\nMonitoringResource\n:\n\n  \nderived_from\n:\n \neu.softfire.BaseResource\n\n\n\u00a0\u00a0description\n:\n \nDefines\n \nthe\n \nZabbix\n \nmonitoring\n \nresource\n \nrequested\n\n\n\u00a0\u00a0properties\n:\n\n\n\u00a0\u00a0\u00a0 testbed\n:\n\n\n\u00a0\u00a0\u00a0\u00a0  type\n:\n \nstring\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required\n:\n \nfalse\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description\n:\n \nLocation\n \nwhere\n \nto\n \ndeploy\n \nthe\n \nmonitoring\n \nserver\n\n\n\n\n\nThis node type has a single property:\n\n\n\n\ntestbed\n: in case the experimenter requires deployment of VMs on more than one testbed is it possible to define on which testbed the Zabbix Server VM will be deployed", 
            "title": "Monitoring Manager"
        }, 
        {
            "location": "/monitoring-manager/#monitoring-manager", 
            "text": "The Monitoring Manager provides proper resources to experimenters requiring monitoring service.\nFor experimenters requiring monitoring services, the Monitoring Manager provides, via OpenBaton, the\ninstallation of an additional Virtual Machine pre-configured with Zabbix\nServer.\nAll Virtual Machines requested by the experimenter will be installed with Zabbix Agent, per-configured to\ncommunicate with experimenter\u2019s Zabbix Server.\nThe experimenters receive full administrations rights of Zabbix Server, in order to be able to configure the\nserver according the specific needs of the experimenter.", 
            "title": "Monitoring Manager"
        }, 
        {
            "location": "/monitoring-manager/#monitoring-resource", 
            "text": "The MonitoringResource node type is defined as follows, as per\u00a0node types page:  node_types :  MonitoringResource : \n   derived_from :   eu.softfire.BaseResource  \u00a0\u00a0description :   Defines   the   Zabbix   monitoring   resource   requested  \u00a0\u00a0properties :  \u00a0\u00a0\u00a0 testbed :  \u00a0\u00a0\u00a0\u00a0  type :   string  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required :   false  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description :   Location   where   to   deploy   the   monitoring   server   This node type has a single property:   testbed : in case the experimenter requires deployment of VMs on more than one testbed is it possible to define on which testbed the Zabbix Server VM will be deployed", 
            "title": "Monitoring resource"
        }, 
        {
            "location": "/install-softfire-middleware/", 
            "text": "How to install the SoftFIRE middleware\n\n\nThe SoftFIRE Middleware already provides a set of bash functions that will help you in case you want to install your \nprivate\n SoftFIRE Middleware. There are two options:\n\n\n\n\ncodeinstall\n: install the code of all the managers and the python package of the SDK. This procedure is meant to be for development purposes\n\n\ninstall\n: install the code of all the managers and the python package of the SDK. This procedure is meant to be for production purposes\n\n\n\n\n\n\nNote\n\n\nThe SoftFIRE Middleware is OS independent, however the bootstrap procedure assumes that the underlying OS is Debian based.\n\n\n\n\nIn case you want just to play around with the Experiment Manger, you can use the docker installation\n\n\nPrerequisites\n\n\nBoth procedures needs to have git installed\n\n\n$-\n sudo apt install git\n\n\n\n\nand to run:\n\n\n$-\n git clone https://github.com/softfire-eu/bootstrap.git\n\n\n\n\nfor instance in your home directory. After the clone, you should have a folder called bootstrap containing:\n\n\nbootstrap\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 bootstrap.sh\n\u2514\u2500\u2500 generate_cork_files.py\n\n\n\n\nThen cd into the directory and run the bootstrap commands:\n\n\n$-\n cd bootstrap\n$-\n ./boostrap.sh\n\n./bootstrap.sh \naction\n\n\nactions:    [install|update|clean|start|stop|codestart|codeupdate|codeinstall|purge]\n\ninstall:      install the SoftFIRE Middleware python packages\nupdate:       update the SoftFIRE Middleware python packages\nclean:        clean the SoftFIRE Middleware\nstart:        start the SoftFIRE Middleware via python packages\nstop:         stop the SoftFIRE Middleware\ncodeinstall:  install the SoftFIRE Middleware source code\ncodeupdate:   update the SoftFIRE Middleware source code\ncodestart:    start the SoftFIRE Middleware via source code\npurge:        completely remove the SoftFIRE Middleware\n\n\n\n\nInstall the source code\n\n\nFor installing the source code just run:\n\n\n$-\n ./boostrap.sh codeinstall\n\n\n\n\nInstall the python packages\n\n\nFor installing the python packages just run:\n\n\n$-\n ./boostrap.sh install\n\n\n\n\nWhat's happening?\n\n\nAfter running these commands the script will:\n\n\n\n\ninstall the debian packages required\n\n\ncreating the configuration folders\n\n\ndownloading the source code or installing python packages of all the managers (depending on what installation procedure you chose)\n\n\ndownloading configuration files\n\n\n\n\nStart the Middleware\n\n\nIf everything went well, you are able to start the SoftFIRE Middleware by running\n\n\n$-\n ./boostrap.sh codestart\n\n\n\n\nin case you installed via source code, or\n\n\n$-\n ./boostrap.sh start\n\n\n\n\nin case you installed via python packages.\n\n\nIn both cases, a tmux session will run in background and you can check the output by attaching to it:\n\n\ntmux a\n\n\n\n\nDocker installation\n\n\nAfter having installed \nDocker\n you can run:\n\n\ndocker pull softfire/softfire-middleware\n\n\n\n\nand then run the container by typing:\n\n\ndocker run --rm -i --name soffifire --env \nLC_ALL=C\n -p \n5180\n:5080 -t softfire-middleware\n\n\n\n\nthen you should be able to access \nhttp://localhost:5180", 
            "title": "Install the SoftFIRE Middleware"
        }, 
        {
            "location": "/install-softfire-middleware/#how-to-install-the-softfire-middleware", 
            "text": "The SoftFIRE Middleware already provides a set of bash functions that will help you in case you want to install your  private  SoftFIRE Middleware. There are two options:   codeinstall : install the code of all the managers and the python package of the SDK. This procedure is meant to be for development purposes  install : install the code of all the managers and the python package of the SDK. This procedure is meant to be for production purposes    Note  The SoftFIRE Middleware is OS independent, however the bootstrap procedure assumes that the underlying OS is Debian based.   In case you want just to play around with the Experiment Manger, you can use the docker installation", 
            "title": "How to install the SoftFIRE middleware"
        }, 
        {
            "location": "/install-softfire-middleware/#prerequisites", 
            "text": "Both procedures needs to have git installed  $-  sudo apt install git  and to run:  $-  git clone https://github.com/softfire-eu/bootstrap.git  for instance in your home directory. After the clone, you should have a folder called bootstrap containing:  bootstrap\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 bootstrap.sh\n\u2514\u2500\u2500 generate_cork_files.py  Then cd into the directory and run the bootstrap commands:  $-  cd bootstrap\n$-  ./boostrap.sh\n\n./bootstrap.sh  action \n\nactions:    [install|update|clean|start|stop|codestart|codeupdate|codeinstall|purge]\n\ninstall:      install the SoftFIRE Middleware python packages\nupdate:       update the SoftFIRE Middleware python packages\nclean:        clean the SoftFIRE Middleware\nstart:        start the SoftFIRE Middleware via python packages\nstop:         stop the SoftFIRE Middleware\ncodeinstall:  install the SoftFIRE Middleware source code\ncodeupdate:   update the SoftFIRE Middleware source code\ncodestart:    start the SoftFIRE Middleware via source code\npurge:        completely remove the SoftFIRE Middleware", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/install-softfire-middleware/#install-the-source-code", 
            "text": "For installing the source code just run:  $-  ./boostrap.sh codeinstall", 
            "title": "Install the source code"
        }, 
        {
            "location": "/install-softfire-middleware/#install-the-python-packages", 
            "text": "For installing the python packages just run:  $-  ./boostrap.sh install", 
            "title": "Install the python packages"
        }, 
        {
            "location": "/install-softfire-middleware/#whats-happening", 
            "text": "After running these commands the script will:   install the debian packages required  creating the configuration folders  downloading the source code or installing python packages of all the managers (depending on what installation procedure you chose)  downloading configuration files", 
            "title": "What's happening?"
        }, 
        {
            "location": "/install-softfire-middleware/#start-the-middleware", 
            "text": "If everything went well, you are able to start the SoftFIRE Middleware by running  $-  ./boostrap.sh codestart  in case you installed via source code, or  $-  ./boostrap.sh start  in case you installed via python packages.  In both cases, a tmux session will run in background and you can check the output by attaching to it:  tmux a", 
            "title": "Start the Middleware"
        }, 
        {
            "location": "/install-softfire-middleware/#docker-installation", 
            "text": "After having installed  Docker  you can run:  docker pull softfire/softfire-middleware  and then run the container by typing:  docker run --rm -i --name soffifire --env  LC_ALL=C  -p  5180 :5080 -t softfire-middleware  then you should be able to access  http://localhost:5180", 
            "title": "Docker installation"
        }, 
        {
            "location": "/sub-manager/", 
            "text": "Write your own manager\n\n\nThis guide is intended for internal developer of SoftFIRE middleware. The easiest way to implement a new sub manager is to do as follows\n\n\n\n\ninstall virtualenv\n\n\ncreate a virtual environment: \nvirtualenv --python\n=\npython3 venv\n\n\nactivate it: \nsource\n venv/bin/activate\n\n\nproceed installing the softfire-sdk: \npip install softfire-sdk\n\n\ncreate the python manager\n\n\n\n\nThe python manager\n\n\nfrom\n \nsdk.softfire.manager\n \nimport\n \nAbstractManager\n\n\nfrom\n \nsdk.softfire.grpc\n \nimport\n \nmessages_pb2\n\n\nfrom\n \nsdk.softfire.utils\n \nimport\n \nTESTBED_MAPPING\n\n\n\nclass\n \nNfvManager\n(\nAbstractManager\n):\n\n    \ndef\n \n__init__\n(\nself\n,\n \nconfig_file_path\n):\n\n        \nsuper\n()\n.\n__init__\n(\nconfig_file_path\n)\n\n\n    \ndef\n \nvalidate_resources\n(\nself\n,\n \nuser_info\n=\nNone\n,\n \npayload\n=\nNone\n)\n \n-\n \nNone\n:\n\n        \n\n\n        Validate the resources\n\n\n\n        :param user_info:\n\n\n        :param payload:\n\n\n        :raise any exception for error\n\n\n        \n\n        \npass\n\n\n    \ndef\n \nrefresh_resources\n(\nself\n,\n \nuser_info\n):\n\n        \n\n\n            List all available images for this tenant\n\n\n\n            :param user_info:\n\n\n            :return: the list of ResourceMetadata\n\n\n             :rtype list\n\n\n            \n\n        \nresult\n \n=\n \n[]\n\n        \nob_client\n \n=\n \nOBClient\n(\nuser_info\n.\nname\n)\n\n        \nfor\n \nimage\n \nin\n \navailable_resources\n():\n\n            \ntestbed\n \n=\n \nimage\n.\nget\n(\ntestbed\n)\n\n            \nresource_id\n \n=\n \nimage\n.\nget\n(\nname\n)\n\n            \nresult\n.\nappend\n(\nmessages_pb2\n.\nResourceMetadata\n(\nresource_id\n=\nresource_id\n,\n\n                                                        \ndescription\n=\n,\n\n                                                        \ncardinality\n=-\n1\n,\n\n                                                        \nnode_type\n=\nNodeType\n,\n\n                                                        \ntestbed\n=\nTESTBED_MAPPING\n.\nget\n(\ntestbed\n)))\n\n        \nreturn\n \nresult\n\n\n    \ndef\n \nprovide_resources\n(\nself\n,\n \nuser_info\n,\n \npayload\n=\nNone\n):\n\n        \n\n\n            Deploy the selected resources. Payload looks like:\n\n\n            {\n\n\n                \nproperties\n: {\n\n\n                    \nnsd_name\n: \nmy_nsd\n,\n\n\n                    \nresource_id\n: \nopen5gcore\n,\n\n\n                    \ntestbeds\n: {\n\n\n                        \nANY\n:\n\n\n                        \nfokus\n\n\n                    }\n\n\n                },\n\n\n                \ntype\n: \nNfvResource\n\n\n            }\n\n\n\n            :param payload: the resources to be deployed\n\n\n             :type payload: dict\n\n\n            :param user_info: the user info requesting\n\n\n            :return: the nsr deployed\n\n\n             :rtype: ProvideResourceResponse\n\n\n            \n\n        \nresource\n=\n{}\n\n        \nreturn\n \n[\nresource\n]\n\n\n    \ndef\n \ncreate_user\n(\nself\n,\n \nuser_info\n):\n\n        \n\n\n            Create project in Open Stack and upload the new vim to Open Baton\n\n\n\n            :param user_info:\n\n\n            :return: the new user info updated\n\n\n             :rtype: UserInfo\n\n\n\n            \n\n\n        \nreturn\n \nuser_info\n\n\n    \ndef\n \nlist_resources\n(\nself\n,\n \nuser_info\n=\nNone\n,\n \npayload\n=\nNone\n):\n\n        \n\n\n            list all available resources\n\n\n\n            :param payload: Not used\n\n\n            :param user_info: the user info requesting, if None only the shared\n\n\n              resources will be returned\n\n\n            :return: list of ResourceMetadata\n\n\n            \n\n\n        \nfor\n \nk\n,\n \nv\n \nin\n \nget_resources\n()\n.\nitems\n():\n\n            \ntestbed\n \n=\n \nv\n.\nget\n(\ntestbed\n)\n\n            \nnode_type\n \n=\n \nv\n.\nget\n(\nnode_type\n)\n\n            \ncardinality\n \n=\n \nint\n(\nv\n.\nget\n(\ncardinality\n))\n\n            \ndescription\n \n=\n \nv\n.\nget\n(\ndescription\n)\n\n            \nresource_id\n \n=\n \nk\n\n            \nresult\n.\nappend\n(\nmessages_pb2\n.\nResourceMetadata\n(\nresource_id\n=\nresource_id\n,\n\n                                                        \ndescription\n=\ndescription\n,\n\n                                                        \ncardinality\n=\ncardinality\n,\n\n                                                        \nnode_type\n=\nnode_type\n,\n\n                                                        \ntestbed\n=\nTESTBED_MAPPING\n.\nget\n(\ntestbed\n)))\n\n\n        \nreturn\n \nresult\n\n\n    \ndef\n \nrelease_resources\n(\nself\n,\n \nuser_info\n,\n \npayload\n=\nNone\n):\n\n        \n\n\n           Delete the NSR from openbaton based on user_info and the nsr\n\n\n           :param payload: the NSR itself\n\n\n           :type payload: dict\n\n\n           :param user_info:\n\n\n            :type user_info: UserInfo\n\n\n           :return: None\n\n\n           \n\n\n    \ndef\n \n_update_status\n(\nself\n)\n \n-\n \ndict\n:\n\n      \n\n\n      update the status of the experiments in case of value change\n\n\n\n      :return: dict\n\n\n      key is \nusername\n and value is a list of str representing the resources of this user\n\n\n      {\n\n\n          \nusername1\n:[],\n\n\n          \nusername2\n:[]\n\n\n      }\n\n\n      \n\n      \nreturn\n \ndict\n()\n\n\n\n\n\nStart the manager:\n\n\nFor starting the manager use the utility method start_manager()\n\n\nfrom\n \nsdk.softfire.main\n \nimport\n \nstart_manager\n\n\n\n\ndef\n \nstart\n():\n\n\n    \nstart_manager\n(\nManager\n(\n/etc/softfire/my-manager.ini\n))\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nstart\n()\n\n\n\n\n\nConfiguration file example\n\n\nThe configuration ini file can be similar to this example:\n\n\n####################################\n\n\n###########  Messaging #############\n\n\n####################################\n\n\n\n[messaging]\n\n\nbind_port\n \n=\n \n50053\n\n\n\n####################################\n\n\n############  system ###############\n\n\n####################################\n\n\n\n[system]\n\n\nserver_threads\n \n=\n \n3\n\n\nexperiment_manager_ip\n \n=\n \nlocalhost\n\n\nexperiment_manager_port\n \n=\n \n50051\n\n\nname\n \n=\n \nmy-manager\n\n\ndescription\n \n=\n \nmy manager\n\n\nip\n \n=\n \nlocalhost\n\n\n\n####################################\n\n\n############  Logging ##############\n\n\n####################################\n\n\n\n[loggers]\n\n\nkeys\n \n=\n \nroot,main\n\n\n\n[handlers]\n\n\nkeys\n \n=\n \nconsoleHandler,logfile\n\n\n\n[formatters]\n\n\nkeys\n \n=\n \nsimpleFormatter,logfileformatter\n\n\n\n[logger_main]\n\n\nlevel\n \n=\n \nDEBUG\n\n\nqualname\n \n=\n \neu.softfire\n\n\nhandlers\n \n=\n \nconsoleHandler,logfile\n\n\npropagate\n \n=\n \n0\n\n\n\n[logger_root]\n\n\nlevel\n \n=\n \nDEBUG\n\n\nhandlers\n \n=\n \nconsoleHandler,logfile\n\n\n\n[handler_consoleHandler]\n\n\nclass\n \n=\n \nStreamHandler\n\n\nlevel\n \n=\n \nDEBUG\n\n\nformatter\n \n=\n \nsimpleFormatter\n\n\nargs\n \n=\n \n(sys.stdout,)\n\n\n\n[formatter_logfileformatter]\n\n\n#format=%(asctime)s %(name)-12s: %(levelname)s %(message)s\n\n\nformat\n \n=\n \n%(levelname)s: %(name)s:%(lineno)-20d:  %(message)s\n\n\n\n[handler_logfile]\n\n\nclass\n \n=\n \nhandlers.RotatingFileHandler\n\n\nlevel\n \n=\n \nDEBUG\n\n\nargs\n \n=\n \n(\n/var/log/softfire/experiment-manager.log\n, \na\n, 2000, 100)\n\n\nformatter\n \n=\n \nlogfileformatter\n\n\n\n[formatter_simpleFormatter]\n\n\nformat\n \n=\n \n%(levelname)s: %(name)s:%(lineno)-20d:  %(message)s", 
            "title": "Write a sub manager"
        }, 
        {
            "location": "/sub-manager/#write-your-own-manager", 
            "text": "This guide is intended for internal developer of SoftFIRE middleware. The easiest way to implement a new sub manager is to do as follows   install virtualenv  create a virtual environment:  virtualenv --python = python3 venv  activate it:  source  venv/bin/activate  proceed installing the softfire-sdk:  pip install softfire-sdk  create the python manager", 
            "title": "Write your own manager"
        }, 
        {
            "location": "/sub-manager/#the-python-manager", 
            "text": "from   sdk.softfire.manager   import   AbstractManager  from   sdk.softfire.grpc   import   messages_pb2  from   sdk.softfire.utils   import   TESTBED_MAPPING  class   NfvManager ( AbstractManager ): \n     def   __init__ ( self ,   config_file_path ): \n         super () . __init__ ( config_file_path ) \n\n     def   validate_resources ( self ,   user_info = None ,   payload = None )   -   None : \n                  Validate the resources          :param user_info:          :param payload:          :raise any exception for error           \n         pass \n\n     def   refresh_resources ( self ,   user_info ): \n                      List all available images for this tenant              :param user_info:              :return: the list of ResourceMetadata               :rtype list               \n         result   =   [] \n         ob_client   =   OBClient ( user_info . name ) \n         for   image   in   available_resources (): \n             testbed   =   image . get ( testbed ) \n             resource_id   =   image . get ( name ) \n             result . append ( messages_pb2 . ResourceMetadata ( resource_id = resource_id , \n                                                         description = , \n                                                         cardinality =- 1 , \n                                                         node_type = NodeType , \n                                                         testbed = TESTBED_MAPPING . get ( testbed ))) \n         return   result \n\n     def   provide_resources ( self ,   user_info ,   payload = None ): \n                      Deploy the selected resources. Payload looks like:              {                   properties : {                       nsd_name :  my_nsd ,                       resource_id :  open5gcore ,                       testbeds : {                           ANY :                           fokus                      }                  },                   type :  NfvResource              }              :param payload: the resources to be deployed               :type payload: dict              :param user_info: the user info requesting              :return: the nsr deployed               :rtype: ProvideResourceResponse               \n         resource = {} \n         return   [ resource ] \n\n     def   create_user ( self ,   user_info ): \n                      Create project in Open Stack and upload the new vim to Open Baton              :param user_info:              :return: the new user info updated               :rtype: UserInfo               \n\n         return   user_info \n\n     def   list_resources ( self ,   user_info = None ,   payload = None ): \n                      list all available resources              :param payload: Not used              :param user_info: the user info requesting, if None only the shared                resources will be returned              :return: list of ResourceMetadata               \n\n         for   k ,   v   in   get_resources () . items (): \n             testbed   =   v . get ( testbed ) \n             node_type   =   v . get ( node_type ) \n             cardinality   =   int ( v . get ( cardinality )) \n             description   =   v . get ( description ) \n             resource_id   =   k \n             result . append ( messages_pb2 . ResourceMetadata ( resource_id = resource_id , \n                                                         description = description , \n                                                         cardinality = cardinality , \n                                                         node_type = node_type , \n                                                         testbed = TESTBED_MAPPING . get ( testbed ))) \n\n         return   result \n\n     def   release_resources ( self ,   user_info ,   payload = None ): \n                     Delete the NSR from openbaton based on user_info and the nsr             :param payload: the NSR itself             :type payload: dict             :param user_info:              :type user_info: UserInfo             :return: None              \n\n     def   _update_status ( self )   -   dict : \n              update the status of the experiments in case of value change        :return: dict        key is  username  and value is a list of str representing the resources of this user        {             username1 :[],             username2 :[]        }         \n       return   dict ()", 
            "title": "The python manager"
        }, 
        {
            "location": "/sub-manager/#start-the-manager", 
            "text": "For starting the manager use the utility method start_manager()  from   sdk.softfire.main   import   start_manager  def   start (): \n\n     start_manager ( Manager ( /etc/softfire/my-manager.ini ))  if   __name__   ==   __main__ : \n     start ()", 
            "title": "Start the manager:"
        }, 
        {
            "location": "/sub-manager/#configuration-file-example", 
            "text": "The configuration ini file can be similar to this example:  ####################################  ###########  Messaging #############  ####################################  [messaging]  bind_port   =   50053  ####################################  ############  system ###############  ####################################  [system]  server_threads   =   3  experiment_manager_ip   =   localhost  experiment_manager_port   =   50051  name   =   my-manager  description   =   my manager  ip   =   localhost  ####################################  ############  Logging ##############  ####################################  [loggers]  keys   =   root,main  [handlers]  keys   =   consoleHandler,logfile  [formatters]  keys   =   simpleFormatter,logfileformatter  [logger_main]  level   =   DEBUG  qualname   =   eu.softfire  handlers   =   consoleHandler,logfile  propagate   =   0  [logger_root]  level   =   DEBUG  handlers   =   consoleHandler,logfile  [handler_consoleHandler]  class   =   StreamHandler  level   =   DEBUG  formatter   =   simpleFormatter  args   =   (sys.stdout,)  [formatter_logfileformatter]  #format=%(asctime)s %(name)-12s: %(levelname)s %(message)s  format   =   %(levelname)s: %(name)s:%(lineno)-20d:  %(message)s  [handler_logfile]  class   =   handlers.RotatingFileHandler  level   =   DEBUG  args   =   ( /var/log/softfire/experiment-manager.log ,  a , 2000, 100)  formatter   =   logfileformatter  [formatter_simpleFormatter]  format   =   %(levelname)s: %(name)s:%(lineno)-20d:  %(message)s", 
            "title": "Configuration file example"
        }, 
        {
            "location": "/gen-certificate/", 
            "text": "How to genereate OpenVPN configuration with certificate\n\n\nThe Experiment Manager provides a ReST API for generating the OpenVPN configuration file automatically.\n\n\n@bottle.post\n(\n/certificates\n)\n\n\n@authorize\n(\nrole\n=\nportal\n)\n\n\ndef\n \nget_certificate\n():\n\n    \nusername\n \n=\n \npost_get\n(\nusername\n)\n\n    \nif\n \nnot\n \nusername\n:\n\n        \nraise\n \nbottle\n.\nHTTPError\n(\n500\n,\n \nUsername missing\n)\n\n    \npassword\n \n=\n \npost_get\n(\npassword\n,\n \ndefault\n=\nNone\n)\n\n    \ndays\n \n=\n \nint\n(\npost_get\n(\ndays\n,\n \ndefault\n=\nNone\n))\n\n    \ncert_gen\n \n=\n \nCertificateGenerator\n()\n\n    \ncert_gen\n.\ngenerate\n(\npassword\n,\n \nusername\n,\n \ndays\n)\n\n    \nopenvpn_config\n \n=\n \ncert_gen\n.\nget_openvpn_config\n()\n\n    \nheaders\n \n=\n \n{\n\n        \nContent-Type\n:\n \ntext/plain;charset=UTF-8\n,\n\n        \nContent-Disposition\n:\n \nattachment; filename=\nsoftfire-vpn_\n%s\n.ovpn\n \n%\n \nusername\n,\n\n        \nContent-Length\n:\n \nlen\n(\nopenvpn_config\n)\n\n    \n}\n\n    \nreturn\n \nbottle\n.\nHTTPResponse\n(\nopenvpn_config\n,\n \n200\n,\n \n**\nheaders\n)\n\n\n\n\n\nFrom the code we see that this is a POST method with the following body parameters:\n\n\n\n\nusername: the username of the openvpn user\n\n\npassword: in case you want to encrypt the private key with passphrase\n\n\ndays: number of validity days (starting from today)\n\n\n\n\nThe requesting user need to belong to the \nportal\n role or higher.\n\n\nThe following shell commands can be used to retrieve the certificate file, a complete example can be found \nhere\n\n\nCOOKIE_FILE\n=\n$(\ntempfile\n)\n\ncurl -X POST --cookie-jar \n$COOKIE_FILE\n --form \nusername=\n$API_USER\n --form \npassword=\n$API_PW\n \n${\nAPI_URL\n}\n/login\ncurl -s -X POST --cookie \n$COOKIE_FILE\n --form \nusername=\n${\nUSERNAME\n}\n --form \npassword=\n${\nPASSWORD\n}\n --form \ndays=\n$VALID\n \n${\nAPI_URL\n}\n/certificates\ncurl -X GET --cookie-jar \n$COOKIE_FILE\n --cookie \n$COOKIE_FILE\n \n${\nAPI_URL\n}\n/logout", 
            "title": "How to generate a certificate"
        }, 
        {
            "location": "/gen-certificate/#how-to-genereate-openvpn-configuration-with-certificate", 
            "text": "The Experiment Manager provides a ReST API for generating the OpenVPN configuration file automatically.  @bottle.post ( /certificates )  @authorize ( role = portal )  def   get_certificate (): \n     username   =   post_get ( username ) \n     if   not   username : \n         raise   bottle . HTTPError ( 500 ,   Username missing ) \n     password   =   post_get ( password ,   default = None ) \n     days   =   int ( post_get ( days ,   default = None )) \n     cert_gen   =   CertificateGenerator () \n     cert_gen . generate ( password ,   username ,   days ) \n     openvpn_config   =   cert_gen . get_openvpn_config () \n     headers   =   { \n         Content-Type :   text/plain;charset=UTF-8 , \n         Content-Disposition :   attachment; filename= softfire-vpn_ %s .ovpn   %   username , \n         Content-Length :   len ( openvpn_config ) \n     } \n     return   bottle . HTTPResponse ( openvpn_config ,   200 ,   ** headers )   From the code we see that this is a POST method with the following body parameters:   username: the username of the openvpn user  password: in case you want to encrypt the private key with passphrase  days: number of validity days (starting from today)   The requesting user need to belong to the  portal  role or higher.  The following shell commands can be used to retrieve the certificate file, a complete example can be found  here  COOKIE_FILE = $( tempfile ) \ncurl -X POST --cookie-jar  $COOKIE_FILE  --form  username= $API_USER  --form  password= $API_PW   ${ API_URL } /login\ncurl -s -X POST --cookie  $COOKIE_FILE  --form  username= ${ USERNAME }  --form  password= ${ PASSWORD }  --form  days= $VALID   ${ API_URL } /certificates\ncurl -X GET --cookie-jar  $COOKIE_FILE  --cookie  $COOKIE_FILE   ${ API_URL } /logout", 
            "title": "How to genereate OpenVPN configuration with certificate"
        }, 
        {
            "location": "/sdn-manager-dev/", 
            "text": "SDN Manager Developer Details\n\n\nOverview\n\n\nThe SDN manager is in charge of managing access to the SDN resources provided by some testbeds.\n\n\n+-------------+   REST   +-----------+                    +--------------+\n| SDN manager | +------+ | SDN proxy | +----------------\n |  OpenSDNcore |\n+-----------+-+          |   FOKUS   |    JSON-RPC        |   controller |\n            |            +-----------+                    +--------------+\n            |\n            |            +-----------+                    +--------------+\n            |     REST   | SDN proxy | +----------------\n | OpenDayLight |\n            +----------+ | Ericsson  |    RESTCONF        |   controller |\n                         +-----------+                    +--------------+\n\n\n\n\nThe SDN manager keeps track of the API endpoints towards the SDN proxy services that are used to filter requests\nfrom experimenters to enabe multi tenancy that is by default not provided by the used SDN controllers.\n\n\nThe communication between the SDN manager and the individual SDN proxy services is authorized by a secret that needs to be passed as a HTTP header field with every request.\nThe URL endpoint used for rest communication between manager and proxy is statically stored inside the configuration file of the SDN manager.\n\n\nThe SDN manager uses the following Experiment LifeCycles:\n\n\n\n\nList\n\n\nProvision\n\n\nRelease\n\n\n\n\nMessage contents\n\n\nThere are three parties involved into the communication:\n\n\n\n\nExperimet Manager (EM)\n\n\nSDN Manager (SM)\n\n\nSDN Proxie(s)\n\n\n\n\nUser Creation\n\n\nCalled when a new tenant is created on the testbed\n\n\nInvolved: Experiment manager, SDN Manager, (SDN Proxy)\n\n\nRequest(EM-\nSM)\n:\n\n\n\n\nUserInformation\n\n\nusername\n\n\npassword (can be used to create an account with the users password)\n\n\ntenant-id for each used testbed\n\n\nexperiment-id (token used for this experiment)\n\n\n\n\nRequest(SM-\nproxie(s))\n:\n\n\n\n\nNote\nthis request is currently only used for OpenSDNCore proxy\n\n\n\n\n\n\nREST request to resource /PrepareTenant with JSON object in request-body:\n\n\n\n\ntoken (experiment-id)\n\n\ntenant-id (for the associated testbed)\n\n\n\n\nmethod\n:\n \nPOST\n\n\npath\n:\n \n/PrepareTenant\n\n\nHeader\n:\n \nAuth-Secret: \nxx\n\n\nBody\n:\n \nJSON\n\n\n\n\n\n \n{\n\n     \ntenant_id\n:\n \nfed0b52c7e034d5785880613e78d4411\n\n \n}\n\n\n\n\n\nResponse (proxie-\nSM)\n:\n REST response body JSON encoded:\n\n\n  \n{\n\n   \nflow-table-offset\n:\n \n10\n\n  \n}\n\n\n\n\n\nResponse (SM-\nEM)\n:\n List of resource objects\n\n\n\n\nresource-id\n\n\nURI\n\n\nflow-table-range\n\n\ntoken?\n\n\n\n\nList Resources\n\n\nInvolved: Experiment manager, SDN Manager\n\n\nResponse (SM-\nEM)\n:\nTOSCA encoded object of type SDNResource for each supported SDN endpoint (e.g. for each testbed)\n\n\n\n\nresource-id\n\n\ntestbed-id\n\n\ndescription text\n\n\n\n\nProvision Resources\n\n\nInvolved: Experiment manager, SDN Manager, SDN Proxy\n\n\nRequest (EM-\nSM)\n:\nTOSCA encoded object with a list SDNResource types for each requested SDN resource. (Each testbed has its own resource.)\n\n\n\n\nresource-id(s)\n\n\nUserInformation\n\n\nusername\n\n\npassword (can be used to create an account with the users password)\n\n\ntenant-id for each used testbed\n\n\nexperiment-id (token used for this experiment)\n\n\n\n\nRequest (SM-\nproxie(s))\n:\nREST request to resource /SDNroxySetup with JSON object in request-body:\n\n\n\n\ntoken (experiment-id)\n\n\ntenant-id (for the associated testbed)\n\n\n\n\nmethod\n:\n \nPOST\n\n\npath\n:\n \n/SDNproxySetup\n\n\nHeader\n:\n \nAuth-Secret: \nxx\n\n\nBody\n:\n \nJSON\n\n\n\n\n\n \n{\n\n     \nexperiment_id\n:\n \na5cfaf1e81f35fde41bef54e35772f2b\n,\n\n     \ntenant_id\n:\n \nfed0b52c7e034d5785880613e78d4411\n\n \n}\n\n\n\n\n\nResponse (proxie-\nSM)\n:\nREST response body JSON encoded:\n\n\n  \n{\n\n    \nendpoint_url\n:\n \nhttp:/foo.bar\n,\n\n    \nuser-flow-tables\n:\n \n[\n10\n,\n11\n,\n12\n,\n13\n,\n14\n,\n15\n]\n\n  \n}\n\n\n\n\n\nResponse (SM-\nEM)\n:\nList of resource objects\n\n\n\n\nresource-id\n\n\nURI\n\n\nflow-table-range\n\n\ntoken?\n\n\n\n\nRelease Resources\n\n\nInvolved: Experiment manager, SDN Manager, SDN Proxy\n\n\nRequest (EM-\nSM)\n:\nList or resource-id(s) to release\n\n\n\n\nrespurce-id\n\n\ntoken\n\n\n\n\nRequest (SM-\nproxie(s))\n:\nREST request to resouce /SDNproxyRemove witgh JSON body\n\n\nmethod\n:\n \nDELETE\n\n\npath\n:\n \n/SDNproxy/\ntoken\n\n\nHeader\n:\n \nAuth-Secret: \nxx\n\n\n\nResponse\n:\n \nHTTP 200\n\n\nBody\n:\n \nnone", 
            "title": "SDN Manager developers"
        }, 
        {
            "location": "/sdn-manager-dev/#sdn-manager-developer-details", 
            "text": "", 
            "title": "SDN Manager Developer Details"
        }, 
        {
            "location": "/sdn-manager-dev/#overview", 
            "text": "The SDN manager is in charge of managing access to the SDN resources provided by some testbeds.  +-------------+   REST   +-----------+                    +--------------+\n| SDN manager | +------+ | SDN proxy | +----------------  |  OpenSDNcore |\n+-----------+-+          |   FOKUS   |    JSON-RPC        |   controller |\n            |            +-----------+                    +--------------+\n            |\n            |            +-----------+                    +--------------+\n            |     REST   | SDN proxy | +----------------  | OpenDayLight |\n            +----------+ | Ericsson  |    RESTCONF        |   controller |\n                         +-----------+                    +--------------+  The SDN manager keeps track of the API endpoints towards the SDN proxy services that are used to filter requests\nfrom experimenters to enabe multi tenancy that is by default not provided by the used SDN controllers.  The communication between the SDN manager and the individual SDN proxy services is authorized by a secret that needs to be passed as a HTTP header field with every request.\nThe URL endpoint used for rest communication between manager and proxy is statically stored inside the configuration file of the SDN manager.  The SDN manager uses the following Experiment LifeCycles:   List  Provision  Release", 
            "title": "Overview"
        }, 
        {
            "location": "/sdn-manager-dev/#message-contents", 
            "text": "There are three parties involved into the communication:   Experimet Manager (EM)  SDN Manager (SM)  SDN Proxie(s)", 
            "title": "Message contents"
        }, 
        {
            "location": "/sdn-manager-dev/#user-creation", 
            "text": "Called when a new tenant is created on the testbed  Involved: Experiment manager, SDN Manager, (SDN Proxy)  Request(EM- SM) :   UserInformation  username  password (can be used to create an account with the users password)  tenant-id for each used testbed  experiment-id (token used for this experiment)   Request(SM- proxie(s)) :   Note this request is currently only used for OpenSDNCore proxy    REST request to resource /PrepareTenant with JSON object in request-body:   token (experiment-id)  tenant-id (for the associated testbed)   method :   POST  path :   /PrepareTenant  Header :   Auth-Secret:  xx  Body :   JSON     { \n      tenant_id :   fed0b52c7e034d5785880613e78d4411 \n  }   Response (proxie- SM) :\n REST response body JSON encoded:     { \n    flow-table-offset :   10 \n   }   Response (SM- EM) :\n List of resource objects   resource-id  URI  flow-table-range  token?", 
            "title": "User Creation"
        }, 
        {
            "location": "/sdn-manager-dev/#list-resources", 
            "text": "Involved: Experiment manager, SDN Manager  Response (SM- EM) :\nTOSCA encoded object of type SDNResource for each supported SDN endpoint (e.g. for each testbed)   resource-id  testbed-id  description text", 
            "title": "List Resources"
        }, 
        {
            "location": "/sdn-manager-dev/#provision-resources", 
            "text": "Involved: Experiment manager, SDN Manager, SDN Proxy  Request (EM- SM) :\nTOSCA encoded object with a list SDNResource types for each requested SDN resource. (Each testbed has its own resource.)   resource-id(s)  UserInformation  username  password (can be used to create an account with the users password)  tenant-id for each used testbed  experiment-id (token used for this experiment)   Request (SM- proxie(s)) :\nREST request to resource /SDNroxySetup with JSON object in request-body:   token (experiment-id)  tenant-id (for the associated testbed)   method :   POST  path :   /SDNproxySetup  Header :   Auth-Secret:  xx  Body :   JSON     { \n      experiment_id :   a5cfaf1e81f35fde41bef54e35772f2b , \n      tenant_id :   fed0b52c7e034d5785880613e78d4411 \n  }   Response (proxie- SM) :\nREST response body JSON encoded:     { \n     endpoint_url :   http:/foo.bar , \n     user-flow-tables :   [ 10 , 11 , 12 , 13 , 14 , 15 ] \n   }   Response (SM- EM) :\nList of resource objects   resource-id  URI  flow-table-range  token?", 
            "title": "Provision Resources"
        }, 
        {
            "location": "/sdn-manager-dev/#release-resources", 
            "text": "Involved: Experiment manager, SDN Manager, SDN Proxy  Request (EM- SM) :\nList or resource-id(s) to release   respurce-id  token   Request (SM- proxie(s)) :\nREST request to resouce /SDNproxyRemove witgh JSON body  method :   DELETE  path :   /SDNproxy/ token  Header :   Auth-Secret:  xx  Response :   HTTP 200  Body :   none", 
            "title": "Release Resources"
        }, 
        {
            "location": "/integration-test/", 
            "text": "SoftFIRE Integration Test\n\n\nThis project can be used to test the functionality of the experiment-manager and related components.\n\n\nRequirements\n\n\nPython 3.5 or higher.\n\n\nInstallation\n\n\nGit clone the \nrepository\n and change into the project\u2019s directory. Execute \npip install .\n for installing the integration test. Afterwards you can start it with the command \nsoftfire-integration-test\n.\nAlternatively you can start it by running the project\u2019s \nsoftfire-integration-test\n file with \npython softfire-integration-test\n.\n\n\nPreparation\n\n\nCopy the \nintegration-test.ini\n file, which you can find in the project\u2019s etc folder, to \n/etc/softfire/integration-test.ini\n. Edit it so that it fits for your testing environment.\n\n\nTest phases\n\n\nThis section describes the test phases which are executed by the integration test. Each phase, except for the \nCreate experimenter\n phase, use the user credentials provided in the configuration file in the \nexperimenter\n section for accessing the experiment-manager.\n\n\nPreparation phase\n\n\nFirst of all the integration test checks if the experiment file exists and scans it for the resources it uses. If something goes wrong in this phase, the remaining phases will not be executed and the test stops.\n\n\nCreate experimenter\n\n\nThis phase is optional and is only executed if the \ncreate-user\n property in the configuration file is set to \ntrue\n. It tries to create a new experimenter in the experiment-manager whose username and password are also defined in the configuration file in the \nexperimenter\n section. This is the only phase in which the \nadmin-username\n and \nadmin-password\n properties from the configuration file are used.\n\n\nUpload experiment\n\n\nIn this phase the experiment is uploaded to the experiment-manager. The experiment that shall be uploaded can be specified in the \nexperiment-file\n property in the configuration file.\n\n\nDeploy experiment\n\n\nThis phase deploys the previously uploaded experiment.\n\n\nValidate experiment\n\n\nIn this phase the integration test checks whether all the resources defined in the experiment are running correctly. The exact validation procedure depends on the resource type. At the moment only resources of type \nNfvResource\n can be validated. This is done by waiting until the NSRs are in active state and then checking if the floating IP addresses of the NSR are reachable.\n\n\nDelete experiment\n\n\nThe last phase removes the experiment from the experiment-manager.\n\n\nAdding validators for other NfvResource types\n\n\nNot all of the different resource types can be validated currently. This section describes how you can add the validation functionality for a certain node type to the integration test.\n\n\nFor this you have to create a new module and a new class in the softfire-integration-test project. In particular:\n\n\n\n\ncreate a sub-module in the \neu.softfire.integrationtest.validators\n module \ncalled as the node type you want to validate\n (for instance \nNfvResource\n for the Nfv Resource)\n\n\ncreate a class in the sub-module you just created called \nNodeTypeValidator\n (for instance NfvResourceValidator)\n\n\nthe class must extend the \neu.softfire.integrationtest.validators.AbstractValidator\n class and implement the abstrac method \nvalidate\n\n\n\n\nThe abstrac class is:\n\n\nclass\n \nAbstractValidator\n(\nmetaclass\n=\nABCMeta\n):\n\n    \n@abstractmethod\n\n    \ndef\n \nvalidate\n(\nself\n,\n \nresource\n,\n \nresource_id\n):\n\n        \npass\n\n\n\n\n\nThe Validator class has to inherit from the AbstractValidator class and implement the \nvalidate\n method which gets the resource and the resource ID of the resource to test as an argument. In this method you can implement the validation of the resource. If the validation is successful, the method should simply return, otherwise it should raise an \nException\n (class of subclass of \nException\n)with the reason of failure as the Exception argument.\n\n\nWith the \nget_resource_from_id(resource_id)\n method you can get the \nnew\n status of the deployed experiment.\n\n\nIf you need an example look at the already existing \nNfvResourceValidator\n class in the \nvalidators.py\n module.", 
            "title": "SoftFIRE Integration Tests"
        }, 
        {
            "location": "/integration-test/#softfire-integration-test", 
            "text": "This project can be used to test the functionality of the experiment-manager and related components.", 
            "title": "SoftFIRE Integration Test"
        }, 
        {
            "location": "/integration-test/#requirements", 
            "text": "Python 3.5 or higher.", 
            "title": "Requirements"
        }, 
        {
            "location": "/integration-test/#installation", 
            "text": "Git clone the  repository  and change into the project\u2019s directory. Execute  pip install .  for installing the integration test. Afterwards you can start it with the command  softfire-integration-test .\nAlternatively you can start it by running the project\u2019s  softfire-integration-test  file with  python softfire-integration-test .", 
            "title": "Installation"
        }, 
        {
            "location": "/integration-test/#preparation", 
            "text": "Copy the  integration-test.ini  file, which you can find in the project\u2019s etc folder, to  /etc/softfire/integration-test.ini . Edit it so that it fits for your testing environment.", 
            "title": "Preparation"
        }, 
        {
            "location": "/integration-test/#test-phases", 
            "text": "This section describes the test phases which are executed by the integration test. Each phase, except for the  Create experimenter  phase, use the user credentials provided in the configuration file in the  experimenter  section for accessing the experiment-manager.", 
            "title": "Test phases"
        }, 
        {
            "location": "/integration-test/#preparation-phase", 
            "text": "First of all the integration test checks if the experiment file exists and scans it for the resources it uses. If something goes wrong in this phase, the remaining phases will not be executed and the test stops.", 
            "title": "Preparation phase"
        }, 
        {
            "location": "/integration-test/#create-experimenter", 
            "text": "This phase is optional and is only executed if the  create-user  property in the configuration file is set to  true . It tries to create a new experimenter in the experiment-manager whose username and password are also defined in the configuration file in the  experimenter  section. This is the only phase in which the  admin-username  and  admin-password  properties from the configuration file are used.", 
            "title": "Create experimenter"
        }, 
        {
            "location": "/integration-test/#upload-experiment", 
            "text": "In this phase the experiment is uploaded to the experiment-manager. The experiment that shall be uploaded can be specified in the  experiment-file  property in the configuration file.", 
            "title": "Upload experiment"
        }, 
        {
            "location": "/integration-test/#deploy-experiment", 
            "text": "This phase deploys the previously uploaded experiment.", 
            "title": "Deploy experiment"
        }, 
        {
            "location": "/integration-test/#validate-experiment", 
            "text": "In this phase the integration test checks whether all the resources defined in the experiment are running correctly. The exact validation procedure depends on the resource type. At the moment only resources of type  NfvResource  can be validated. This is done by waiting until the NSRs are in active state and then checking if the floating IP addresses of the NSR are reachable.", 
            "title": "Validate experiment"
        }, 
        {
            "location": "/integration-test/#delete-experiment", 
            "text": "The last phase removes the experiment from the experiment-manager.", 
            "title": "Delete experiment"
        }, 
        {
            "location": "/integration-test/#adding-validators-for-other-nfvresource-types", 
            "text": "Not all of the different resource types can be validated currently. This section describes how you can add the validation functionality for a certain node type to the integration test.  For this you have to create a new module and a new class in the softfire-integration-test project. In particular:   create a sub-module in the  eu.softfire.integrationtest.validators  module  called as the node type you want to validate  (for instance  NfvResource  for the Nfv Resource)  create a class in the sub-module you just created called  NodeTypeValidator  (for instance NfvResourceValidator)  the class must extend the  eu.softfire.integrationtest.validators.AbstractValidator  class and implement the abstrac method  validate   The abstrac class is:  class   AbstractValidator ( metaclass = ABCMeta ): \n     @abstractmethod \n     def   validate ( self ,   resource ,   resource_id ): \n         pass   The Validator class has to inherit from the AbstractValidator class and implement the  validate  method which gets the resource and the resource ID of the resource to test as an argument. In this method you can implement the validation of the resource. If the validation is successful, the method should simply return, otherwise it should raise an  Exception  (class of subclass of  Exception )with the reason of failure as the Exception argument.  With the  get_resource_from_id(resource_id)  method you can get the  new  status of the deployed experiment.  If you need an example look at the already existing  NfvResourceValidator  class in the  validators.py  module.", 
            "title": "Adding validators for other NfvResource types"
        }, 
        {
            "location": "/openvpnconfig/", 
            "text": "Open Vpn Manual Configuration\n\n\nThe OpenVPN server provides access into the SoftFIRE VPN for Experimenters.\nThe Experimenters can access the VPN using their experimenter certificate that was generated during the registration process.\n\n\nThere are two options to create the OpenVPN configuration file. You need to follow only one of these.\n\n\nOption one: Experimenter configuration file with external certificate file.\n\n\nThis solution needs two files that need to be placed in one folder, but it is easier to create.\n\n\nCreate a file \"softfire.ovpn\" and put the following text inside and store it in the same folder as the downloaded \"certificate.pem\"\n\n\ndev tun\nclient\nremote softfire-vpn.av.tu-berlin.de 443\n;proto udp\nproto tcp\nnobind\npersist-key\npersist-tun\ncomp-lzo\nkeepalive 10 120\nverb 3\nremote-cert-tls server\nresolv-retry infinite\nnobind\n\nca\n\n-----BEGIN CERTIFICATE-----\nMIIFAzCCA+ugAwIBAgIQLJdZE0PTZ7/N1PiCOH1EOzANBgkqhkiG9w0BAQsFADCB\npTELMAkGA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGlu\nMRIwEAYDVQQKDAlUVSBCZXJsaW4xCzAJBgNVBAsMAkFWMR4wHAYDVQQDDBVUVSBC\nZXJsaW4gU29mdEZJUkUgQ0ExMzAxBgkqhkiG9w0BCQEWJGF2LWluZnJhc3RydWN0\ndXJlQGxpc3RzLnR1LWJlcmxpbi5kZTAeFw0xNjA2MjcxNTMxNTlaFw0yMTA2MjYx\nNTMxNTlaMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQH\nDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAcBgNV\nBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYtaW5m\ncmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA1Fk2hti4hsahT8t+8fEfxrSAiJJDuXyj5g48mn37u8o2\n0VK/9STmG7nCiZQwtEIiz9MpxDo6oeap8qwJacp5V6RTZ5d3sPypfM5S06vxTOZX\nKsvWWv7E7An+O0J8I819mfg3/SkJJmu12i13f+r03+29hnlPZaXuqZnQmKFfolpP\nGHTaPLbn5aED17Lyg0eyFiCCXBes5FM9fBuqbSU+jDmfwd+nBcJG61oHdrGvp5vZ\ngUQm8X43sMeb/dP8ncHP3cft47A5QHc+GKDNroWW43almezOgByzzckG39eWqV0h\nE18Bts5y9BUdsYNJdZaLEWAPMLR8Li3LAx1gd2YVwQIDAQABo4IBKzCCAScwEgYD\nVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFDMfaUfm\nl6CQdssrpTLv4WG81BHhMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssrpTLv4WG8\n1BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYD\nVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAc\nBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYt\naW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nnv83U+II4\nfUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQCz6j6JMXbBUG0j4Ijx4JsuuuHaJBmBB/eN\nS6qthzg8F6wC45K2Xel0T3+uhFmnBbylWIVP0Xl3SthGeukJqT2VgnbRbYt6I17x\not8eUyZb495moDJ8wWN8XU6Atcl6igB2tNmsZkj5OnaepQTyy1Ocl8akHN4TNKD5\nolNy0TpH70+FfzuDRKGqfzivAT5P3l1zyRcRDSk4wVEXFB/95ZqX90AvPiLOfGAe\naEIbwcXwcVxYma83LhCiBZo3SQ1wH+cvOrDwQ/SY0u2fndpf5WqAeBj9A3aYgqCS\nlMg366OjDzFpNaTLX4HQPX682AuMj338NPLoPXXfyHxmIMN4ZRcs\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFmTCCBIGgAwIBAgICAQIwDQYJKoZIhvcNAQELBQAwgaUxCzAJBgNVBAYTAkRF\nMQ8wDQYDVQQIDAZCZXJsaW4xDzANBgNVBAcMBkJlcmxpbjESMBAGA1UECgwJVFUg\nQmVybGluMQswCQYDVQQLDAJBVjEeMBwGA1UEAwwVVFUgQmVybGluIFNvZnRGSVJF\nIENBMTMwMQYJKoZIhvcNAQkBFiRhdi1pbmZyYXN0cnVjdHVyZUBsaXN0cy50dS1i\nZXJsaW4uZGUwHhcNMTYwNzI3MTQ0ODQzWhcNMTgwNzI3MTQ0ODQzWjBgMQswCQYD\nVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQHDAZCZXJsaW4xGTAXBgNV\nBAoMEEZyYXVuaG9mZXIgRk9LVVMxFDASBgNVBAMMC0ZpdGVhZ2xlIENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3Hy2l7zLZRE306xu15X9jZFub7SS\nyiQxndC4zDun+av/TiQJU/gK1/TPo6Y0u2+sqpuTPCh6XBA2N63AmZzpZpSAMBux\nJTm+BOYIqa0GJ5tW5tKBMPH3pITdgsh256ckyf57LUKH66yQgTfJskpF5ovDMNUq\n6vZAvEVjXa/A3tUaB5NxcQeLixKJJrmuh2TBxN3OOWNKD8vyal6KKOTYpeaillZ9\nzqmtNr9nXnlhfMBZPXJBQmw2OOlaX5uIuceMkpg6TIVrNlbdJuS9TeTVmx1MtmVm\n73Q5ii2FcopYrV1v8W4C3atxFCTfmFRlrRm6sJ7ZRQhGtJphPZczwtqcC7MKJjQN\nbYeAG8BQHRnVQrVXr5+jrysqFWGoXGDISVprm0DjGij5ok2jIYaSgBpLVrD3e4eC\nLgYH58+f8u5tQxE1TxGCudAb0fSMy+GAe+5qbbEQkLc/+WXnGi4xTTozebmccJs8\nmbu5/BICYu5e53B58DFJy8x8qjLQjXuvspKqcPT5Dp07LmIu30sgrXG+Mdq1cWjV\nVHx9XwJz1c89Oy/6TandrznRfGVNAzXPenm3gr0wib7qwWlsSPTrBOcXyjMthV27\nwX6MK5GWWH+Uk5Z9a/V2JE9+J3KtEtk8D4xSEIQJ+pJZtXh1YxNzzYhY/czJLYdA\nloVSHOjwDmPtbEECAwEAAaOCARUwggERMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE\nFMKA1MAJkTlwFZ5USVhoOJkZO4CDMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssr\npTLv4WG81BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGlu\nMQ8wDQYDVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwC\nQVYxHjAcBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJ\nARYkYXYtaW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nn\nv83U+II4fUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQAYcCmGctVfnRZ6oL2z6qvn9Dhm\nHpt1zIC0pR7vKroi8OyGpv+BB7gHEXX0ecq8VtLKTcXWYR+7NdZS7IX8lyd81LiX\nXB1x09hEKH8O71T9v3TAMVtFDHmUito8cJQtPJFlVLZyL5xF+H0VHHEED4JP8xp4\nKPFd2Rt0ixTNnE3ccUgumty1X+xq0rWSCzOXy11TxOv2tzB7TA/O85XRw9QzE3jw\n4WjTS7tH9Phe/JTxbnhADS7k5mHZ+FDmX4xeTrXKNKv9+W1Qz9qQQ441IWpokBow\ntBeOMiadvRRQ2fhNuKCpgVUgyUyts0fFvDwJhLTnUqEbdgr19HbLO8GwqPbk\n-----END CERTIFICATE-----\n\n/ca\n\ncert certificate.pem\nkey certificate.pem\n\n\n\n\nOption two: config file with embedded keys\n\n\nThis solution only needs a single file, but this file as to be edited manually.\n\n\nCreate a file \"softfire.ovpn\" and put the following text inside and copy and paste your certificate from the downloaded \"certificate.pem\" into the \ncert\n section and your private key into the \nkey\n section\n\n\ndev tun\nclient\nremote softfire-vpn.av.tu-berlin.de 443\n;proto udp\nproto tcp\nnobind\npersist-key\npersist-tun\ncomp-lzo\nkeepalive 10 120\nverb 3\nremote-cert-tls server\nresolv-retry infinite\nnobind\n\nca\n\n-----BEGIN CERTIFICATE-----\nMIIFAzCCA+ugAwIBAgIQLJdZE0PTZ7/N1PiCOH1EOzANBgkqhkiG9w0BAQsFADCB\npTELMAkGA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGlu\nMRIwEAYDVQQKDAlUVSBCZXJsaW4xCzAJBgNVBAsMAkFWMR4wHAYDVQQDDBVUVSBC\nZXJsaW4gU29mdEZJUkUgQ0ExMzAxBgkqhkiG9w0BCQEWJGF2LWluZnJhc3RydWN0\ndXJlQGxpc3RzLnR1LWJlcmxpbi5kZTAeFw0xNjA2MjcxNTMxNTlaFw0yMTA2MjYx\nNTMxNTlaMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQH\nDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAcBgNV\nBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYtaW5m\ncmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA1Fk2hti4hsahT8t+8fEfxrSAiJJDuXyj5g48mn37u8o2\n0VK/9STmG7nCiZQwtEIiz9MpxDo6oeap8qwJacp5V6RTZ5d3sPypfM5S06vxTOZX\nKsvWWv7E7An+O0J8I819mfg3/SkJJmu12i13f+r03+29hnlPZaXuqZnQmKFfolpP\nGHTaPLbn5aED17Lyg0eyFiCCXBes5FM9fBuqbSU+jDmfwd+nBcJG61oHdrGvp5vZ\ngUQm8X43sMeb/dP8ncHP3cft47A5QHc+GKDNroWW43almezOgByzzckG39eWqV0h\nE18Bts5y9BUdsYNJdZaLEWAPMLR8Li3LAx1gd2YVwQIDAQABo4IBKzCCAScwEgYD\nVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFDMfaUfm\nl6CQdssrpTLv4WG81BHhMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssrpTLv4WG8\n1BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYD\nVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAc\nBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYt\naW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nnv83U+II4\nfUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQCz6j6JMXbBUG0j4Ijx4JsuuuHaJBmBB/eN\nS6qthzg8F6wC45K2Xel0T3+uhFmnBbylWIVP0Xl3SthGeukJqT2VgnbRbYt6I17x\not8eUyZb495moDJ8wWN8XU6Atcl6igB2tNmsZkj5OnaepQTyy1Ocl8akHN4TNKD5\nolNy0TpH70+FfzuDRKGqfzivAT5P3l1zyRcRDSk4wVEXFB/95ZqX90AvPiLOfGAe\naEIbwcXwcVxYma83LhCiBZo3SQ1wH+cvOrDwQ/SY0u2fndpf5WqAeBj9A3aYgqCS\nlMg366OjDzFpNaTLX4HQPX682AuMj338NPLoPXXfyHxmIMN4ZRcs\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFmTCCBIGgAwIBAgICAQIwDQYJKoZIhvcNAQELBQAwgaUxCzAJBgNVBAYTAkRF\nMQ8wDQYDVQQIDAZCZXJsaW4xDzANBgNVBAcMBkJlcmxpbjESMBAGA1UECgwJVFUg\nQmVybGluMQswCQYDVQQLDAJBVjEeMBwGA1UEAwwVVFUgQmVybGluIFNvZnRGSVJF\nIENBMTMwMQYJKoZIhvcNAQkBFiRhdi1pbmZyYXN0cnVjdHVyZUBsaXN0cy50dS1i\nZXJsaW4uZGUwHhcNMTYwNzI3MTQ0ODQzWhcNMTgwNzI3MTQ0ODQzWjBgMQswCQYD\nVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQHDAZCZXJsaW4xGTAXBgNV\nBAoMEEZyYXVuaG9mZXIgRk9LVVMxFDASBgNVBAMMC0ZpdGVhZ2xlIENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3Hy2l7zLZRE306xu15X9jZFub7SS\nyiQxndC4zDun+av/TiQJU/gK1/TPo6Y0u2+sqpuTPCh6XBA2N63AmZzpZpSAMBux\nJTm+BOYIqa0GJ5tW5tKBMPH3pITdgsh256ckyf57LUKH66yQgTfJskpF5ovDMNUq\n6vZAvEVjXa/A3tUaB5NxcQeLixKJJrmuh2TBxN3OOWNKD8vyal6KKOTYpeaillZ9\nzqmtNr9nXnlhfMBZPXJBQmw2OOlaX5uIuceMkpg6TIVrNlbdJuS9TeTVmx1MtmVm\n73Q5ii2FcopYrV1v8W4C3atxFCTfmFRlrRm6sJ7ZRQhGtJphPZczwtqcC7MKJjQN\nbYeAG8BQHRnVQrVXr5+jrysqFWGoXGDISVprm0DjGij5ok2jIYaSgBpLVrD3e4eC\nLgYH58+f8u5tQxE1TxGCudAb0fSMy+GAe+5qbbEQkLc/+WXnGi4xTTozebmccJs8\nmbu5/BICYu5e53B58DFJy8x8qjLQjXuvspKqcPT5Dp07LmIu30sgrXG+Mdq1cWjV\nVHx9XwJz1c89Oy/6TandrznRfGVNAzXPenm3gr0wib7qwWlsSPTrBOcXyjMthV27\nwX6MK5GWWH+Uk5Z9a/V2JE9+J3KtEtk8D4xSEIQJ+pJZtXh1YxNzzYhY/czJLYdA\nloVSHOjwDmPtbEECAwEAAaOCARUwggERMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE\nFMKA1MAJkTlwFZ5USVhoOJkZO4CDMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssr\npTLv4WG81BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGlu\nMQ8wDQYDVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwC\nQVYxHjAcBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJ\nARYkYXYtaW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nn\nv83U+II4fUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQAYcCmGctVfnRZ6oL2z6qvn9Dhm\nHpt1zIC0pR7vKroi8OyGpv+BB7gHEXX0ecq8VtLKTcXWYR+7NdZS7IX8lyd81LiX\nXB1x09hEKH8O71T9v3TAMVtFDHmUito8cJQtPJFlVLZyL5xF+H0VHHEED4JP8xp4\nKPFd2Rt0ixTNnE3ccUgumty1X+xq0rWSCzOXy11TxOv2tzB7TA/O85XRw9QzE3jw\n4WjTS7tH9Phe/JTxbnhADS7k5mHZ+FDmX4xeTrXKNKv9+W1Qz9qQQ441IWpokBow\ntBeOMiadvRRQ2fhNuKCpgVUgyUyts0fFvDwJhLTnUqEbdgr19HbLO8GwqPbk\n-----END CERTIFICATE-----\n\n/ca\n\n\ncert\n\n-----BEGIN CERTIFICATE-----\n**Paste Your Cert Text here**\n\n-----END CERTIFICATE-----\n\n/cert\n\n\nkey\n\n-----BEGIN PRIVATE KEY-----\n**Paste Your Cert Private Key here**\n\n-----END PRIVATE KEY-----\n\n/key", 
            "title": "OpenVPN Manual configuration"
        }, 
        {
            "location": "/openvpnconfig/#open-vpn-manual-configuration", 
            "text": "The OpenVPN server provides access into the SoftFIRE VPN for Experimenters.\nThe Experimenters can access the VPN using their experimenter certificate that was generated during the registration process.  There are two options to create the OpenVPN configuration file. You need to follow only one of these.", 
            "title": "Open Vpn Manual Configuration"
        }, 
        {
            "location": "/openvpnconfig/#option-one-experimenter-configuration-file-with-external-certificate-file", 
            "text": "This solution needs two files that need to be placed in one folder, but it is easier to create.  Create a file \"softfire.ovpn\" and put the following text inside and store it in the same folder as the downloaded \"certificate.pem\"  dev tun\nclient\nremote softfire-vpn.av.tu-berlin.de 443\n;proto udp\nproto tcp\nnobind\npersist-key\npersist-tun\ncomp-lzo\nkeepalive 10 120\nverb 3\nremote-cert-tls server\nresolv-retry infinite\nnobind ca \n-----BEGIN CERTIFICATE-----\nMIIFAzCCA+ugAwIBAgIQLJdZE0PTZ7/N1PiCOH1EOzANBgkqhkiG9w0BAQsFADCB\npTELMAkGA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGlu\nMRIwEAYDVQQKDAlUVSBCZXJsaW4xCzAJBgNVBAsMAkFWMR4wHAYDVQQDDBVUVSBC\nZXJsaW4gU29mdEZJUkUgQ0ExMzAxBgkqhkiG9w0BCQEWJGF2LWluZnJhc3RydWN0\ndXJlQGxpc3RzLnR1LWJlcmxpbi5kZTAeFw0xNjA2MjcxNTMxNTlaFw0yMTA2MjYx\nNTMxNTlaMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQH\nDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAcBgNV\nBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYtaW5m\ncmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA1Fk2hti4hsahT8t+8fEfxrSAiJJDuXyj5g48mn37u8o2\n0VK/9STmG7nCiZQwtEIiz9MpxDo6oeap8qwJacp5V6RTZ5d3sPypfM5S06vxTOZX\nKsvWWv7E7An+O0J8I819mfg3/SkJJmu12i13f+r03+29hnlPZaXuqZnQmKFfolpP\nGHTaPLbn5aED17Lyg0eyFiCCXBes5FM9fBuqbSU+jDmfwd+nBcJG61oHdrGvp5vZ\ngUQm8X43sMeb/dP8ncHP3cft47A5QHc+GKDNroWW43almezOgByzzckG39eWqV0h\nE18Bts5y9BUdsYNJdZaLEWAPMLR8Li3LAx1gd2YVwQIDAQABo4IBKzCCAScwEgYD\nVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFDMfaUfm\nl6CQdssrpTLv4WG81BHhMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssrpTLv4WG8\n1BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYD\nVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAc\nBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYt\naW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nnv83U+II4\nfUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQCz6j6JMXbBUG0j4Ijx4JsuuuHaJBmBB/eN\nS6qthzg8F6wC45K2Xel0T3+uhFmnBbylWIVP0Xl3SthGeukJqT2VgnbRbYt6I17x\not8eUyZb495moDJ8wWN8XU6Atcl6igB2tNmsZkj5OnaepQTyy1Ocl8akHN4TNKD5\nolNy0TpH70+FfzuDRKGqfzivAT5P3l1zyRcRDSk4wVEXFB/95ZqX90AvPiLOfGAe\naEIbwcXwcVxYma83LhCiBZo3SQ1wH+cvOrDwQ/SY0u2fndpf5WqAeBj9A3aYgqCS\nlMg366OjDzFpNaTLX4HQPX682AuMj338NPLoPXXfyHxmIMN4ZRcs\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFmTCCBIGgAwIBAgICAQIwDQYJKoZIhvcNAQELBQAwgaUxCzAJBgNVBAYTAkRF\nMQ8wDQYDVQQIDAZCZXJsaW4xDzANBgNVBAcMBkJlcmxpbjESMBAGA1UECgwJVFUg\nQmVybGluMQswCQYDVQQLDAJBVjEeMBwGA1UEAwwVVFUgQmVybGluIFNvZnRGSVJF\nIENBMTMwMQYJKoZIhvcNAQkBFiRhdi1pbmZyYXN0cnVjdHVyZUBsaXN0cy50dS1i\nZXJsaW4uZGUwHhcNMTYwNzI3MTQ0ODQzWhcNMTgwNzI3MTQ0ODQzWjBgMQswCQYD\nVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQHDAZCZXJsaW4xGTAXBgNV\nBAoMEEZyYXVuaG9mZXIgRk9LVVMxFDASBgNVBAMMC0ZpdGVhZ2xlIENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3Hy2l7zLZRE306xu15X9jZFub7SS\nyiQxndC4zDun+av/TiQJU/gK1/TPo6Y0u2+sqpuTPCh6XBA2N63AmZzpZpSAMBux\nJTm+BOYIqa0GJ5tW5tKBMPH3pITdgsh256ckyf57LUKH66yQgTfJskpF5ovDMNUq\n6vZAvEVjXa/A3tUaB5NxcQeLixKJJrmuh2TBxN3OOWNKD8vyal6KKOTYpeaillZ9\nzqmtNr9nXnlhfMBZPXJBQmw2OOlaX5uIuceMkpg6TIVrNlbdJuS9TeTVmx1MtmVm\n73Q5ii2FcopYrV1v8W4C3atxFCTfmFRlrRm6sJ7ZRQhGtJphPZczwtqcC7MKJjQN\nbYeAG8BQHRnVQrVXr5+jrysqFWGoXGDISVprm0DjGij5ok2jIYaSgBpLVrD3e4eC\nLgYH58+f8u5tQxE1TxGCudAb0fSMy+GAe+5qbbEQkLc/+WXnGi4xTTozebmccJs8\nmbu5/BICYu5e53B58DFJy8x8qjLQjXuvspKqcPT5Dp07LmIu30sgrXG+Mdq1cWjV\nVHx9XwJz1c89Oy/6TandrznRfGVNAzXPenm3gr0wib7qwWlsSPTrBOcXyjMthV27\nwX6MK5GWWH+Uk5Z9a/V2JE9+J3KtEtk8D4xSEIQJ+pJZtXh1YxNzzYhY/czJLYdA\nloVSHOjwDmPtbEECAwEAAaOCARUwggERMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE\nFMKA1MAJkTlwFZ5USVhoOJkZO4CDMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssr\npTLv4WG81BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGlu\nMQ8wDQYDVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwC\nQVYxHjAcBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJ\nARYkYXYtaW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nn\nv83U+II4fUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQAYcCmGctVfnRZ6oL2z6qvn9Dhm\nHpt1zIC0pR7vKroi8OyGpv+BB7gHEXX0ecq8VtLKTcXWYR+7NdZS7IX8lyd81LiX\nXB1x09hEKH8O71T9v3TAMVtFDHmUito8cJQtPJFlVLZyL5xF+H0VHHEED4JP8xp4\nKPFd2Rt0ixTNnE3ccUgumty1X+xq0rWSCzOXy11TxOv2tzB7TA/O85XRw9QzE3jw\n4WjTS7tH9Phe/JTxbnhADS7k5mHZ+FDmX4xeTrXKNKv9+W1Qz9qQQ441IWpokBow\ntBeOMiadvRRQ2fhNuKCpgVUgyUyts0fFvDwJhLTnUqEbdgr19HbLO8GwqPbk\n-----END CERTIFICATE----- /ca \ncert certificate.pem\nkey certificate.pem", 
            "title": "Option one: Experimenter configuration file with external certificate file."
        }, 
        {
            "location": "/openvpnconfig/#option-two-config-file-with-embedded-keys", 
            "text": "This solution only needs a single file, but this file as to be edited manually.  Create a file \"softfire.ovpn\" and put the following text inside and copy and paste your certificate from the downloaded \"certificate.pem\" into the  cert  section and your private key into the  key  section  dev tun\nclient\nremote softfire-vpn.av.tu-berlin.de 443\n;proto udp\nproto tcp\nnobind\npersist-key\npersist-tun\ncomp-lzo\nkeepalive 10 120\nverb 3\nremote-cert-tls server\nresolv-retry infinite\nnobind ca \n-----BEGIN CERTIFICATE-----\nMIIFAzCCA+ugAwIBAgIQLJdZE0PTZ7/N1PiCOH1EOzANBgkqhkiG9w0BAQsFADCB\npTELMAkGA1UEBhMCREUxDzANBgNVBAgMBkJlcmxpbjEPMA0GA1UEBwwGQmVybGlu\nMRIwEAYDVQQKDAlUVSBCZXJsaW4xCzAJBgNVBAsMAkFWMR4wHAYDVQQDDBVUVSBC\nZXJsaW4gU29mdEZJUkUgQ0ExMzAxBgkqhkiG9w0BCQEWJGF2LWluZnJhc3RydWN0\ndXJlQGxpc3RzLnR1LWJlcmxpbi5kZTAeFw0xNjA2MjcxNTMxNTlaFw0yMTA2MjYx\nNTMxNTlaMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQH\nDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAcBgNV\nBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYtaW5m\ncmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA1Fk2hti4hsahT8t+8fEfxrSAiJJDuXyj5g48mn37u8o2\n0VK/9STmG7nCiZQwtEIiz9MpxDo6oeap8qwJacp5V6RTZ5d3sPypfM5S06vxTOZX\nKsvWWv7E7An+O0J8I819mfg3/SkJJmu12i13f+r03+29hnlPZaXuqZnQmKFfolpP\nGHTaPLbn5aED17Lyg0eyFiCCXBes5FM9fBuqbSU+jDmfwd+nBcJG61oHdrGvp5vZ\ngUQm8X43sMeb/dP8ncHP3cft47A5QHc+GKDNroWW43almezOgByzzckG39eWqV0h\nE18Bts5y9BUdsYNJdZaLEWAPMLR8Li3LAx1gd2YVwQIDAQABo4IBKzCCAScwEgYD\nVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFDMfaUfm\nl6CQdssrpTLv4WG81BHhMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssrpTLv4WG8\n1BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYD\nVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwCQVYxHjAc\nBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJARYkYXYt\naW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nnv83U+II4\nfUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQCz6j6JMXbBUG0j4Ijx4JsuuuHaJBmBB/eN\nS6qthzg8F6wC45K2Xel0T3+uhFmnBbylWIVP0Xl3SthGeukJqT2VgnbRbYt6I17x\not8eUyZb495moDJ8wWN8XU6Atcl6igB2tNmsZkj5OnaepQTyy1Ocl8akHN4TNKD5\nolNy0TpH70+FfzuDRKGqfzivAT5P3l1zyRcRDSk4wVEXFB/95ZqX90AvPiLOfGAe\naEIbwcXwcVxYma83LhCiBZo3SQ1wH+cvOrDwQ/SY0u2fndpf5WqAeBj9A3aYgqCS\nlMg366OjDzFpNaTLX4HQPX682AuMj338NPLoPXXfyHxmIMN4ZRcs\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFmTCCBIGgAwIBAgICAQIwDQYJKoZIhvcNAQELBQAwgaUxCzAJBgNVBAYTAkRF\nMQ8wDQYDVQQIDAZCZXJsaW4xDzANBgNVBAcMBkJlcmxpbjESMBAGA1UECgwJVFUg\nQmVybGluMQswCQYDVQQLDAJBVjEeMBwGA1UEAwwVVFUgQmVybGluIFNvZnRGSVJF\nIENBMTMwMQYJKoZIhvcNAQkBFiRhdi1pbmZyYXN0cnVjdHVyZUBsaXN0cy50dS1i\nZXJsaW4uZGUwHhcNMTYwNzI3MTQ0ODQzWhcNMTgwNzI3MTQ0ODQzWjBgMQswCQYD\nVQQGEwJERTEPMA0GA1UECAwGQmVybGluMQ8wDQYDVQQHDAZCZXJsaW4xGTAXBgNV\nBAoMEEZyYXVuaG9mZXIgRk9LVVMxFDASBgNVBAMMC0ZpdGVhZ2xlIENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA3Hy2l7zLZRE306xu15X9jZFub7SS\nyiQxndC4zDun+av/TiQJU/gK1/TPo6Y0u2+sqpuTPCh6XBA2N63AmZzpZpSAMBux\nJTm+BOYIqa0GJ5tW5tKBMPH3pITdgsh256ckyf57LUKH66yQgTfJskpF5ovDMNUq\n6vZAvEVjXa/A3tUaB5NxcQeLixKJJrmuh2TBxN3OOWNKD8vyal6KKOTYpeaillZ9\nzqmtNr9nXnlhfMBZPXJBQmw2OOlaX5uIuceMkpg6TIVrNlbdJuS9TeTVmx1MtmVm\n73Q5ii2FcopYrV1v8W4C3atxFCTfmFRlrRm6sJ7ZRQhGtJphPZczwtqcC7MKJjQN\nbYeAG8BQHRnVQrVXr5+jrysqFWGoXGDISVprm0DjGij5ok2jIYaSgBpLVrD3e4eC\nLgYH58+f8u5tQxE1TxGCudAb0fSMy+GAe+5qbbEQkLc/+WXnGi4xTTozebmccJs8\nmbu5/BICYu5e53B58DFJy8x8qjLQjXuvspKqcPT5Dp07LmIu30sgrXG+Mdq1cWjV\nVHx9XwJz1c89Oy/6TandrznRfGVNAzXPenm3gr0wib7qwWlsSPTrBOcXyjMthV27\nwX6MK5GWWH+Uk5Z9a/V2JE9+J3KtEtk8D4xSEIQJ+pJZtXh1YxNzzYhY/czJLYdA\nloVSHOjwDmPtbEECAwEAAaOCARUwggERMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE\nFMKA1MAJkTlwFZ5USVhoOJkZO4CDMIHhBgNVHSMEgdkwgdaAFDMfaUfml6CQdssr\npTLv4WG81BHhoYGrpIGoMIGlMQswCQYDVQQGEwJERTEPMA0GA1UECAwGQmVybGlu\nMQ8wDQYDVQQHDAZCZXJsaW4xEjAQBgNVBAoMCVRVIEJlcmxpbjELMAkGA1UECwwC\nQVYxHjAcBgNVBAMMFVRVIEJlcmxpbiBTb2Z0RklSRSBDQTEzMDEGCSqGSIb3DQEJ\nARYkYXYtaW5mcmFzdHJ1Y3R1cmVAbGlzdHMudHUtYmVybGluLmRlghAsl1kTQ9Nn\nv83U+II4fUQ7MA0GCSqGSIb3DQEBCwUAA4IBAQAYcCmGctVfnRZ6oL2z6qvn9Dhm\nHpt1zIC0pR7vKroi8OyGpv+BB7gHEXX0ecq8VtLKTcXWYR+7NdZS7IX8lyd81LiX\nXB1x09hEKH8O71T9v3TAMVtFDHmUito8cJQtPJFlVLZyL5xF+H0VHHEED4JP8xp4\nKPFd2Rt0ixTNnE3ccUgumty1X+xq0rWSCzOXy11TxOv2tzB7TA/O85XRw9QzE3jw\n4WjTS7tH9Phe/JTxbnhADS7k5mHZ+FDmX4xeTrXKNKv9+W1Qz9qQQ441IWpokBow\ntBeOMiadvRRQ2fhNuKCpgVUgyUyts0fFvDwJhLTnUqEbdgr19HbLO8GwqPbk\n-----END CERTIFICATE----- /ca  cert \n-----BEGIN CERTIFICATE-----\n**Paste Your Cert Text here**\n\n-----END CERTIFICATE----- /cert  key \n-----BEGIN PRIVATE KEY-----\n**Paste Your Cert Private Key here**\n\n-----END PRIVATE KEY----- /key", 
            "title": "Option two: config file with embedded keys"
        }
    ]
}